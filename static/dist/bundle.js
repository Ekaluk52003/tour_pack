/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@alpinejs/persist/dist/module.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/@alpinejs/persist/dist/module.esm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ module_default),\n/* harmony export */   persist: () => (/* binding */ src_default)\n/* harmony export */ });\n// packages/persist/src/index.js\nfunction src_default(Alpine) {\n  let persist = () => {\n    let alias;\n    let storage;\n    try {\n      storage = localStorage;\n    } catch (e) {\n      console.error(e);\n      console.warn(\"Alpine: $persist is using temporary storage since localStorage is unavailable.\");\n      let dummy = /* @__PURE__ */ new Map();\n      storage = {\n        getItem: dummy.get.bind(dummy),\n        setItem: dummy.set.bind(dummy)\n      };\n    }\n    return Alpine.interceptor((initialValue, getter, setter, path, key) => {\n      let lookup = alias || `_x_${path}`;\n      let initial = storageHas(lookup, storage) ? storageGet(lookup, storage) : initialValue;\n      setter(initial);\n      Alpine.effect(() => {\n        let value = getter();\n        storageSet(lookup, value, storage);\n        setter(value);\n      });\n      return initial;\n    }, (func) => {\n      func.as = (key) => {\n        alias = key;\n        return func;\n      }, func.using = (target) => {\n        storage = target;\n        return func;\n      };\n    });\n  };\n  Object.defineProperty(Alpine, \"$persist\", { get: () => persist() });\n  Alpine.magic(\"persist\", persist);\n  Alpine.persist = (key, { get, set }, storage = localStorage) => {\n    let initial = storageHas(key, storage) ? storageGet(key, storage) : get();\n    set(initial);\n    Alpine.effect(() => {\n      let value = get();\n      storageSet(key, value, storage);\n      set(value);\n    });\n  };\n}\nfunction storageHas(key, storage) {\n  return storage.getItem(key) !== null;\n}\nfunction storageGet(key, storage) {\n  let value = storage.getItem(key, storage);\n  if (value === void 0)\n    return;\n  return JSON.parse(value);\n}\nfunction storageSet(key, value, storage) {\n  storage.setItem(key, JSON.stringify(value));\n}\n\n// packages/persist/builds/module.js\nvar module_default = src_default;\n\n\n\n//# sourceURL=webpack://your-project-name/./node_modules/@alpinejs/persist/dist/module.esm.js?");

/***/ }),

/***/ "./node_modules/@imacrayon/alpine-ajax/dist/module.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@imacrayon/alpine-ajax/dist/module.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ module_default)\n/* harmony export */ });\n// src/index.js\nvar settings = {\n  headers: {},\n  mergeStrategy: \"replace\",\n  transitions: false\n};\nvar doMorph = (from, to) => {\n  console.error(`You can't use the \"morph\" merge without first installing the Alpine \"morph\" plugin here: https://alpinejs.dev/plugins/morph`);\n};\nfunction Ajax(Alpine) {\n  if (Alpine.morph)\n    doMorph = Alpine.morph;\n  Alpine.addInitSelector(() => `[${Alpine.prefixed(\"target\")}]`);\n  Alpine.addInitSelector(() => `[${Alpine.prefixed(\"target\\\\.push\")}]`);\n  Alpine.addInitSelector(() => `[${Alpine.prefixed(\"target\\\\.replace\")}]`);\n  Alpine.directive(\"target\", (el, { value, modifiers, expression }, { evaluateLater, effect }) => {\n    let setTargets = (ids) => {\n      let statues = modifiers.filter((modifier) => modifier === \"error\" || parseInt(modifier));\n      statues = statues.length ? statues : [\"xxx\"];\n      statues.forEach((status) => {\n        if (status.charAt(0) === \"3\") {\n          status = \"3xx\";\n        }\n        AjaxAttributes.set(el, {\n          [status]: {\n            ids: parseIds(el, ids),\n            focus: !modifiers.includes(\"nofocus\"),\n            history: modifiers.includes(\"push\") ? \"push\" : modifiers.includes(\"replace\") ? \"replace\" : false\n          }\n        });\n      });\n    };\n    if (value === \"dynamic\") {\n      let evaluate = evaluateLater(expression);\n      effect(() => evaluate(setTargets));\n    } else {\n      setTargets(expression);\n    }\n  });\n  Alpine.directive(\"headers\", (el, { expression }, { evaluateLater, effect }) => {\n    let evaluate = evaluateLater(expression || \"{}\");\n    effect(() => {\n      evaluate((headers) => {\n        AjaxAttributes.set(el, { headers });\n      });\n    });\n  });\n  Alpine.addInitSelector(() => `[${Alpine.prefixed(\"merge\")}]`);\n  Alpine.directive(\"merge\", (el, { value, modifiers, expression }, { evaluateLater, effect }) => {\n    let setMerge = (strategy) => {\n      AjaxAttributes.set(el, {\n        strategy: strategy || settings.mergeStrategy,\n        transition: settings.transitions || modifiers.includes(\"transition\")\n      });\n    };\n    if (value === \"dynamic\") {\n      let evaluate = evaluateLater(expression);\n      effect(() => evaluate(setMerge));\n    } else {\n      setMerge(expression);\n    }\n  });\n  Alpine.magic(\"ajax\", (el) => {\n    return async (action, options = {}) => {\n      let targets = findTargets(parseIds(el, options.targets || options.target));\n      targets = options.sync ? addSyncTargets(targets) : targets;\n      let referrer = source(el);\n      let headers = Object.assign({}, settings.headers, options.headers || {});\n      let method = options.method ? options.method.toUpperCase() : \"GET\";\n      let body = options.body;\n      let response = await request(el, targets, action, referrer, headers, method, body);\n      let history = \"history\" in options ? options.history : false;\n      let focus = \"focus\" in options ? options.focus : true;\n      return render(response, el, targets, history, focus);\n    };\n  });\n  let listeners = [];\n  Alpine.ajax = {\n    start() {\n      if (!listeners.length) {\n        listeners.push(addGlobalListener(\"submit\", handleForms));\n        listeners.push(addGlobalListener(\"click\", handleLinks));\n      }\n    },\n    stop() {\n      listeners.forEach((ignore) => ignore());\n      listeners = [];\n    }\n  };\n  Alpine.ajax.start();\n}\nAjax.configure = (options) => {\n  settings = Object.assign(settings, options);\n  return Ajax;\n};\nvar src_default = Ajax;\nvar AjaxAttributes = {\n  store: /* @__PURE__ */ new WeakMap(),\n  set(el, config) {\n    if (this.store.has(el)) {\n      this.store.set(el, Object.assign(this.store.get(el), config));\n    } else {\n      this.store.set(el, config);\n    }\n  },\n  get(el) {\n    return this.store.get(el) || {};\n  },\n  has(el) {\n    return this.store.has(el);\n  }\n};\nasync function handleLinks(event) {\n  if (event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey)\n    return;\n  let link = event?.target.closest(\"a[href]:not([download]):not([noajax])\");\n  if (!link || !AjaxAttributes.has(link) || link.isContentEditable || link.origin !== window.location.origin || link.getAttribute(\"href\").startsWith(\"#\") || sameUrl(link, window.location) && link.hash)\n    return;\n  event.preventDefault();\n  event.stopImmediatePropagation();\n  let attributes = AjaxAttributes.get(link);\n  let config = attributes.xxx || {};\n  let targets = addSyncTargets(findTargets(config.ids));\n  let referrer = source(link);\n  let action = link.getAttribute(\"href\") || referrer;\n  let headers = attributes.headers || {};\n  let response = await request(link, targets, action, referrer, headers);\n  let key = statusKey(attributes, response);\n  if (key) {\n    let newConfig = attributes[key];\n    if (!newConfig.ids.includes(\"_self\") || !response.redirected || !sameUrl(new URL(response.url), window.location)) {\n      targets.forEach((target) => target.removeAttribute(\"aria-busy\"));\n      config = newConfig;\n      targets = addSyncTargets(findTargets(config.ids));\n    }\n  }\n  let history = config.history;\n  let focus = config.focus ?? true;\n  try {\n    return await render(response, link, targets, history, focus);\n  } catch (error) {\n    if (error.name === \"RenderError\") {\n      console.warn(error.message);\n      window.location.href = link.href;\n      return;\n    }\n    throw error;\n  }\n}\nasync function handleForms(event) {\n  if (event.defaultPrevented) {\n    return;\n  }\n  let form = event.target;\n  let submitter = event.submitter;\n  let method = (submitter?.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || \"GET\").toUpperCase();\n  if (!form || !AjaxAttributes.has(form) || method === \"DIALOG\" || submitter?.hasAttribute(\"formnoajax\") || submitter?.hasAttribute(\"formtarget\") || form.hasAttribute(\"noajax\") || form.hasAttribute(\"target\"))\n    return;\n  event.preventDefault();\n  event.stopImmediatePropagation();\n  let attributes = AjaxAttributes.get(form);\n  let config = attributes.xxx || {};\n  let targets = addSyncTargets(findTargets(config.ids));\n  let referrer = source(form);\n  let action = form.getAttribute(\"action\") || referrer;\n  let headers = attributes.headers || {};\n  let body = new FormData(form);\n  let enctype = form.getAttribute(\"enctype\");\n  if (submitter) {\n    enctype = submitter.getAttribute(\"formenctype\") || enctype;\n    action = submitter.getAttribute(\"formaction\") || action;\n    if (submitter.name) {\n      body.append(submitter.name, submitter.value);\n    }\n  }\n  let response = await withSubmitter(submitter, () => {\n    return request(form, targets, action, referrer, headers, method, body, enctype);\n  });\n  let key = statusKey(attributes, response);\n  if (key) {\n    let newConfig = attributes[key];\n    if (!newConfig.ids.includes(\"_self\") || !response.redirected || !sameUrl(new URL(response.url), window.location)) {\n      targets.forEach((target) => target.removeAttribute(\"aria-busy\"));\n      config = newConfig;\n      targets = addSyncTargets(findTargets(config.ids));\n    }\n  }\n  let history = config.history;\n  let focus = config.focus ?? true;\n  try {\n    return await render(response, form, targets, history, focus);\n  } catch (error) {\n    if (error.name === \"RenderError\") {\n      console.warn(error.message);\n      form.setAttribute(\"noajax\", \"true\");\n      form.requestSubmit(submitter);\n      return;\n    }\n    throw error;\n  }\n}\nfunction addGlobalListener(name, callback) {\n  let callbackWithErrorHandler = async (event) => {\n    try {\n      await callback(event);\n    } catch (error) {\n      if (error.name === \"AbortError\") {\n        return;\n      }\n      throw error;\n    }\n  };\n  let onCapture = () => {\n    document.removeEventListener(name, callbackWithErrorHandler, false);\n    document.addEventListener(name, callbackWithErrorHandler, false);\n  };\n  document.addEventListener(name, onCapture, true);\n  return () => document.removeEventListener(name, onCapture, true);\n}\nasync function withSubmitter(submitter, callback) {\n  if (!submitter)\n    return await callback();\n  let disableEvent = (e) => e.preventDefault();\n  submitter.setAttribute(\"aria-disabled\", \"true\");\n  submitter.addEventListener(\"click\", disableEvent);\n  let result;\n  try {\n    result = await callback();\n  } finally {\n    submitter.removeAttribute(\"aria-disabled\");\n    submitter.removeEventListener(\"click\", disableEvent);\n  }\n  return result;\n}\nvar PendingTargets = {\n  store: /* @__PURE__ */ new Map(),\n  abort(id) {\n    if (this.store.has(id)) {\n      let request2 = this.store.get(id);\n      request2.controller.abort();\n      request2.target.removeAttribute(\"aria-busy\");\n    }\n  },\n  set(id, target, controller) {\n    this.abort(id);\n    target.querySelectorAll(\"[aria-busy]\").forEach((busy) => this.abort(busy.getAttribute(\"id\")));\n    this.store.set(id, { target, controller });\n    target.setAttribute(\"aria-busy\", \"true\");\n  }\n};\nvar PendingRequests = /* @__PURE__ */ new Map();\nasync function request(el, targets, action, referrer, headers, method = \"GET\", body = null, enctype = \"application/x-www-form-urlencoded\") {\n  if (!dispatch(el, \"ajax:before\")) {\n    throw new DOMException(\"[ajax:before] aborted\", \"AbortError\");\n  }\n  let controller = new AbortController();\n  let targetIds = [];\n  targets.forEach((target) => {\n    let id = target.getAttribute(\"id\");\n    PendingTargets.set(id, target, controller);\n    targetIds.push(id);\n  });\n  let pending;\n  if (method === \"GET\" && PendingRequests.has(action)) {\n    pending = PendingRequests.get(action);\n  } else {\n    headers[\"X-Alpine-Target\"] = targetIds.join(\"  \");\n    headers[\"X-Alpine-Request\"] = \"true\";\n    headers = Object.assign({}, settings.headers, headers);\n    body = body ? parseFormData(body) : null;\n    let options = {\n      action,\n      method,\n      headers,\n      body,\n      referrer,\n      enctype,\n      signal: controller.signal\n    };\n    dispatch(el, \"ajax:send\", options);\n    if (options.body) {\n      if (options.method === \"GET\") {\n        options.action = mergeBodyIntoAction(options.body, options.action);\n        options.body = null;\n      } else if (options.enctype !== \"multipart/form-data\") {\n        options.body = formDataToParams(options.body);\n      }\n    }\n    pending = fetch(options.action, options).then(async (response2) => {\n      response2.html = await response2.text();\n      return response2;\n    });\n    PendingRequests.set(action, pending);\n  }\n  let response = await pending;\n  PendingRequests.delete(action);\n  if (response.ok) {\n    if (response.redirected) {\n      dispatch(el, \"ajax:redirect\", response);\n      PendingRequests.set(response.url, pending);\n      setTimeout(() => {\n        PendingRequests.delete(response.url);\n      }, 10);\n    }\n    dispatch(el, \"ajax:success\", response);\n  } else {\n    dispatch(el, \"ajax:error\", response);\n  }\n  dispatch(el, \"ajax:sent\", response);\n  return response;\n}\nfunction parseFormData(data) {\n  if (data instanceof FormData)\n    return data;\n  if (data instanceof HTMLFormElement)\n    return new FormData(data);\n  const formData = new FormData();\n  for (let key in data) {\n    if (typeof data[key] === \"object\") {\n      formData.append(key, JSON.stringify(data[key]));\n    } else {\n      formData.append(key, data[key]);\n    }\n  }\n  return formData;\n}\nfunction mergeBodyIntoAction(body, action) {\n  action = new URL(action, document.baseURI);\n  action.search = formDataToParams(body).toString();\n  return action.toString();\n}\nfunction formDataToParams(body) {\n  let params = Array.from(body.entries()).filter(([key, value]) => {\n    return !(value instanceof File);\n  });\n  return new URLSearchParams(params);\n}\nasync function render(response, el, targets, history, focus) {\n  if (!response.html) {\n    targets.forEach((target) => target.removeAttribute(\"aria-busy\"));\n    return;\n  }\n  if (history) {\n    updateHistory(history, response.url);\n  }\n  let wrapper = document.createRange().createContextualFragment(\"<template>\" + response.html + \"</template>\");\n  let fragment = wrapper.firstElementChild.content;\n  let focused = !focus;\n  let renders = targets.map(async (target) => {\n    if (target === document) {\n      window.location.href = response.url;\n      return;\n    }\n    let id = target.getAttribute(\"id\");\n    let content = fragment.getElementById(id);\n    let strategy = AjaxAttributes.get(target)?.strategy ?? settings.mergeStrategy;\n    if (!content) {\n      if (target.matches(\"[x-sync]\")) {\n        return;\n      }\n      if (!dispatch(el, \"ajax:missing\", { target, response })) {\n        return;\n      }\n      if (response.ok) {\n        return target.remove();\n      }\n      throw new RenderError(target, response.status);\n    }\n    let mergeContent = async () => {\n      let merged = await merge(strategy, target, content);\n      if (merged) {\n        merged.dataset.source = response.url;\n        merged.removeAttribute(\"aria-busy\");\n        let selectors = [\"[x-autofocus]\", \"[autofocus]\"];\n        while (!focused && selectors.length) {\n          let selector = selectors.shift();\n          if (merged.matches(selector)) {\n            focused = focusOn(merged);\n          }\n          focused = focused || Array.from(merged.querySelectorAll(selector)).some((focusable) => focusOn(focusable));\n        }\n      }\n      dispatch(merged, \"ajax:merged\");\n      return merged;\n    };\n    if (!dispatch(target, \"ajax:merge\", { strategy, content, merge: mergeContent })) {\n      return;\n    }\n    return mergeContent();\n  });\n  let render2 = await Promise.all(renders);\n  dispatch(el, \"ajax:after\", {\n    response,\n    render: render2\n  });\n  return render2;\n}\nasync function merge(strategy, from, to) {\n  let strategies = {\n    before(from2, to2) {\n      from2.before(...to2.childNodes);\n      return from2;\n    },\n    replace(from2, to2) {\n      from2.replaceWith(to2);\n      return to2;\n    },\n    update(from2, to2) {\n      from2.replaceChildren(...to2.childNodes);\n      return from2;\n    },\n    prepend(from2, to2) {\n      from2.prepend(...to2.childNodes);\n      return from2;\n    },\n    append(from2, to2) {\n      from2.append(...to2.childNodes);\n      return from2;\n    },\n    after(from2, to2) {\n      from2.after(...to2.childNodes);\n      return from2;\n    },\n    morph(from2, to2) {\n      doMorph(from2, to2);\n      return document.getElementById(to2.getAttribute(\"id\"));\n    }\n  };\n  if (!AjaxAttributes.get(from)?.transition || !document.startViewTransition) {\n    return strategies[strategy](from, to);\n  }\n  let merged = null;\n  let transition = document.startViewTransition(() => {\n    merged = strategies[strategy](from, to);\n    return Promise.resolve();\n  });\n  await transition.updateCallbackDone;\n  return merged;\n}\nfunction focusOn(el) {\n  if (!el)\n    return false;\n  if (!el.getClientRects().length)\n    return false;\n  setTimeout(() => {\n    if (!el.hasAttribute(\"tabindex\"))\n      el.setAttribute(\"tabindex\", \"0\");\n    el.focus();\n  }, 0);\n  return true;\n}\nfunction updateHistory(strategy, url) {\n  let strategies = {\n    push: () => window.history.pushState({ __ajax: true }, \"\", url),\n    replace: () => window.history.replaceState({ __ajax: true }, \"\", url)\n  };\n  return strategies[strategy]();\n}\nfunction parseIds(el, ids = null) {\n  let parsed = [el.getAttribute(\"id\")];\n  if (ids) {\n    parsed = Array.isArray(ids) ? ids : ids.split(\" \");\n  }\n  parsed = parsed.filter((id) => id);\n  if (parsed.length === 0) {\n    throw new IDError(el);\n  }\n  return parsed;\n}\nfunction findTargets(ids = []) {\n  return ids.map((id) => {\n    let target = [\"_self\", \"_top\"].includes(id) ? document : document.getElementById(id);\n    if (!target) {\n      throw new TargetError(id);\n    }\n    return target;\n  });\n}\nfunction addSyncTargets(targets) {\n  document.querySelectorAll(\"[x-sync]\").forEach((el) => {\n    let id = el.getAttribute(\"id\");\n    if (!id) {\n      throw new IdNotFoundError(el);\n    }\n    if (!targets.some((target) => target.getAttribute(\"id\") === id)) {\n      targets.push(el);\n    }\n  });\n  return targets;\n}\nfunction statusKey(attributes, response) {\n  let status = response.redirected ? \"3xx\" : response.status.toString();\n  return [\n    status,\n    status.charAt(0) + \"xx\",\n    !response.ok ? \"error\" : \"\"\n  ].find((key) => key in attributes);\n}\nfunction source(el) {\n  return el.closest(\"[data-source]\")?.dataset.source || window.location.href;\n}\nfunction dispatch(el, name, detail) {\n  return el.dispatchEvent(\n    new CustomEvent(name, {\n      detail,\n      bubbles: true,\n      composed: true,\n      cancelable: true\n    })\n  );\n}\nfunction sameUrl(urlA, urlB) {\n  return stripTrailingSlash(urlA.pathname) + urlA.search === stripTrailingSlash(urlB.pathname) + urlB.search;\n}\nfunction stripTrailingSlash(str) {\n  return str.replace(/\\/$/, \"\");\n}\nvar IDError = class extends DOMException {\n  constructor(el) {\n    let description = (el.outerHTML.match(/<[^>]+>/) ?? [])[0] ?? \"[Element]\";\n    super(`${description} is missing an ID to target.`, \"IDError\");\n  }\n};\nvar TargetError = class extends DOMException {\n  constructor(id) {\n    super(`Target [#${id}] was not found in current document.`, \"TargetError\");\n  }\n};\nvar RenderError = class extends DOMException {\n  constructor(target, status) {\n    let id = target.getAttribute(\"id\");\n    super(`Target [#${id}] was not found in response with status [${status}].`, \"RenderError\");\n  }\n};\n\n// builds/module.js\nvar module_default = src_default;\n\n\n\n//# sourceURL=webpack://your-project-name/./node_modules/@imacrayon/alpine-ajax/dist/module.esm.js?");

/***/ }),

/***/ "./node_modules/alpinejs/dist/module.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/alpinejs/dist/module.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alpine: () => (/* binding */ src_default),\n/* harmony export */   \"default\": () => (/* binding */ module_default)\n/* harmony export */ });\n// packages/alpinejs/src/scheduler.js\nvar flushPending = false;\nvar flushing = false;\nvar queue = [];\nvar lastFlushedIndex = -1;\nfunction scheduler(callback) {\n  queueJob(callback);\n}\nfunction queueJob(job) {\n  if (!queue.includes(job))\n    queue.push(job);\n  queueFlush();\n}\nfunction dequeueJob(job) {\n  let index = queue.indexOf(job);\n  if (index !== -1 && index > lastFlushedIndex)\n    queue.splice(index, 1);\n}\nfunction queueFlush() {\n  if (!flushing && !flushPending) {\n    flushPending = true;\n    queueMicrotask(flushJobs);\n  }\n}\nfunction flushJobs() {\n  flushPending = false;\n  flushing = true;\n  for (let i = 0; i < queue.length; i++) {\n    queue[i]();\n    lastFlushedIndex = i;\n  }\n  queue.length = 0;\n  lastFlushedIndex = -1;\n  flushing = false;\n}\n\n// packages/alpinejs/src/reactivity.js\nvar reactive;\nvar effect;\nvar release;\nvar raw;\nvar shouldSchedule = true;\nfunction disableEffectScheduling(callback) {\n  shouldSchedule = false;\n  callback();\n  shouldSchedule = true;\n}\nfunction setReactivityEngine(engine) {\n  reactive = engine.reactive;\n  release = engine.release;\n  effect = (callback) => engine.effect(callback, { scheduler: (task) => {\n    if (shouldSchedule) {\n      scheduler(task);\n    } else {\n      task();\n    }\n  } });\n  raw = engine.raw;\n}\nfunction overrideEffect(override) {\n  effect = override;\n}\nfunction elementBoundEffect(el) {\n  let cleanup2 = () => {\n  };\n  let wrappedEffect = (callback) => {\n    let effectReference = effect(callback);\n    if (!el._x_effects) {\n      el._x_effects = /* @__PURE__ */ new Set();\n      el._x_runEffects = () => {\n        el._x_effects.forEach((i) => i());\n      };\n    }\n    el._x_effects.add(effectReference);\n    cleanup2 = () => {\n      if (effectReference === void 0)\n        return;\n      el._x_effects.delete(effectReference);\n      release(effectReference);\n    };\n    return effectReference;\n  };\n  return [wrappedEffect, () => {\n    cleanup2();\n  }];\n}\nfunction watch(getter, callback) {\n  let firstTime = true;\n  let oldValue;\n  let effectReference = effect(() => {\n    let value = getter();\n    JSON.stringify(value);\n    if (!firstTime) {\n      queueMicrotask(() => {\n        callback(value, oldValue);\n        oldValue = value;\n      });\n    } else {\n      oldValue = value;\n    }\n    firstTime = false;\n  });\n  return () => release(effectReference);\n}\n\n// packages/alpinejs/src/mutation.js\nvar onAttributeAddeds = [];\nvar onElRemoveds = [];\nvar onElAddeds = [];\nfunction onElAdded(callback) {\n  onElAddeds.push(callback);\n}\nfunction onElRemoved(el, callback) {\n  if (typeof callback === \"function\") {\n    if (!el._x_cleanups)\n      el._x_cleanups = [];\n    el._x_cleanups.push(callback);\n  } else {\n    callback = el;\n    onElRemoveds.push(callback);\n  }\n}\nfunction onAttributesAdded(callback) {\n  onAttributeAddeds.push(callback);\n}\nfunction onAttributeRemoved(el, name, callback) {\n  if (!el._x_attributeCleanups)\n    el._x_attributeCleanups = {};\n  if (!el._x_attributeCleanups[name])\n    el._x_attributeCleanups[name] = [];\n  el._x_attributeCleanups[name].push(callback);\n}\nfunction cleanupAttributes(el, names) {\n  if (!el._x_attributeCleanups)\n    return;\n  Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {\n    if (names === void 0 || names.includes(name)) {\n      value.forEach((i) => i());\n      delete el._x_attributeCleanups[name];\n    }\n  });\n}\nfunction cleanupElement(el) {\n  if (el._x_cleanups) {\n    while (el._x_cleanups.length)\n      el._x_cleanups.pop()();\n  }\n}\nvar observer = new MutationObserver(onMutate);\nvar currentlyObserving = false;\nfunction startObservingMutations() {\n  observer.observe(document, { subtree: true, childList: true, attributes: true, attributeOldValue: true });\n  currentlyObserving = true;\n}\nfunction stopObservingMutations() {\n  flushObserver();\n  observer.disconnect();\n  currentlyObserving = false;\n}\nvar queuedMutations = [];\nfunction flushObserver() {\n  let records = observer.takeRecords();\n  queuedMutations.push(() => records.length > 0 && onMutate(records));\n  let queueLengthWhenTriggered = queuedMutations.length;\n  queueMicrotask(() => {\n    if (queuedMutations.length === queueLengthWhenTriggered) {\n      while (queuedMutations.length > 0)\n        queuedMutations.shift()();\n    }\n  });\n}\nfunction mutateDom(callback) {\n  if (!currentlyObserving)\n    return callback();\n  stopObservingMutations();\n  let result = callback();\n  startObservingMutations();\n  return result;\n}\nvar isCollecting = false;\nvar deferredMutations = [];\nfunction deferMutations() {\n  isCollecting = true;\n}\nfunction flushAndStopDeferringMutations() {\n  isCollecting = false;\n  onMutate(deferredMutations);\n  deferredMutations = [];\n}\nfunction onMutate(mutations) {\n  if (isCollecting) {\n    deferredMutations = deferredMutations.concat(mutations);\n    return;\n  }\n  let addedNodes = /* @__PURE__ */ new Set();\n  let removedNodes = /* @__PURE__ */ new Set();\n  let addedAttributes = /* @__PURE__ */ new Map();\n  let removedAttributes = /* @__PURE__ */ new Map();\n  for (let i = 0; i < mutations.length; i++) {\n    if (mutations[i].target._x_ignoreMutationObserver)\n      continue;\n    if (mutations[i].type === \"childList\") {\n      mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.add(node));\n      mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.add(node));\n    }\n    if (mutations[i].type === \"attributes\") {\n      let el = mutations[i].target;\n      let name = mutations[i].attributeName;\n      let oldValue = mutations[i].oldValue;\n      let add2 = () => {\n        if (!addedAttributes.has(el))\n          addedAttributes.set(el, []);\n        addedAttributes.get(el).push({ name, value: el.getAttribute(name) });\n      };\n      let remove = () => {\n        if (!removedAttributes.has(el))\n          removedAttributes.set(el, []);\n        removedAttributes.get(el).push(name);\n      };\n      if (el.hasAttribute(name) && oldValue === null) {\n        add2();\n      } else if (el.hasAttribute(name)) {\n        remove();\n        add2();\n      } else {\n        remove();\n      }\n    }\n  }\n  removedAttributes.forEach((attrs, el) => {\n    cleanupAttributes(el, attrs);\n  });\n  addedAttributes.forEach((attrs, el) => {\n    onAttributeAddeds.forEach((i) => i(el, attrs));\n  });\n  for (let node of removedNodes) {\n    if (addedNodes.has(node))\n      continue;\n    onElRemoveds.forEach((i) => i(node));\n  }\n  addedNodes.forEach((node) => {\n    node._x_ignoreSelf = true;\n    node._x_ignore = true;\n  });\n  for (let node of addedNodes) {\n    if (removedNodes.has(node))\n      continue;\n    if (!node.isConnected)\n      continue;\n    delete node._x_ignoreSelf;\n    delete node._x_ignore;\n    onElAddeds.forEach((i) => i(node));\n    node._x_ignore = true;\n    node._x_ignoreSelf = true;\n  }\n  addedNodes.forEach((node) => {\n    delete node._x_ignoreSelf;\n    delete node._x_ignore;\n  });\n  addedNodes = null;\n  removedNodes = null;\n  addedAttributes = null;\n  removedAttributes = null;\n}\n\n// packages/alpinejs/src/scope.js\nfunction scope(node) {\n  return mergeProxies(closestDataStack(node));\n}\nfunction addScopeToNode(node, data2, referenceNode) {\n  node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];\n  return () => {\n    node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);\n  };\n}\nfunction closestDataStack(node) {\n  if (node._x_dataStack)\n    return node._x_dataStack;\n  if (typeof ShadowRoot === \"function\" && node instanceof ShadowRoot) {\n    return closestDataStack(node.host);\n  }\n  if (!node.parentNode) {\n    return [];\n  }\n  return closestDataStack(node.parentNode);\n}\nfunction mergeProxies(objects) {\n  return new Proxy({ objects }, mergeProxyTrap);\n}\nvar mergeProxyTrap = {\n  ownKeys({ objects }) {\n    return Array.from(\n      new Set(objects.flatMap((i) => Object.keys(i)))\n    );\n  },\n  has({ objects }, name) {\n    if (name == Symbol.unscopables)\n      return false;\n    return objects.some(\n      (obj) => Object.prototype.hasOwnProperty.call(obj, name) || Reflect.has(obj, name)\n    );\n  },\n  get({ objects }, name, thisProxy) {\n    if (name == \"toJSON\")\n      return collapseProxies;\n    return Reflect.get(\n      objects.find(\n        (obj) => Reflect.has(obj, name)\n      ) || {},\n      name,\n      thisProxy\n    );\n  },\n  set({ objects }, name, value, thisProxy) {\n    const target = objects.find(\n      (obj) => Object.prototype.hasOwnProperty.call(obj, name)\n    ) || objects[objects.length - 1];\n    const descriptor = Object.getOwnPropertyDescriptor(target, name);\n    if (descriptor?.set && descriptor?.get)\n      return descriptor.set.call(thisProxy, value) || true;\n    return Reflect.set(target, name, value);\n  }\n};\nfunction collapseProxies() {\n  let keys = Reflect.ownKeys(this);\n  return keys.reduce((acc, key) => {\n    acc[key] = Reflect.get(this, key);\n    return acc;\n  }, {});\n}\n\n// packages/alpinejs/src/interceptor.js\nfunction initInterceptors(data2) {\n  let isObject2 = (val) => typeof val === \"object\" && !Array.isArray(val) && val !== null;\n  let recurse = (obj, basePath = \"\") => {\n    Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, { value, enumerable }]) => {\n      if (enumerable === false || value === void 0)\n        return;\n      if (typeof value === \"object\" && value !== null && value.__v_skip)\n        return;\n      let path = basePath === \"\" ? key : `${basePath}.${key}`;\n      if (typeof value === \"object\" && value !== null && value._x_interceptor) {\n        obj[key] = value.initialize(data2, path, key);\n      } else {\n        if (isObject2(value) && value !== obj && !(value instanceof Element)) {\n          recurse(value, path);\n        }\n      }\n    });\n  };\n  return recurse(data2);\n}\nfunction interceptor(callback, mutateObj = () => {\n}) {\n  let obj = {\n    initialValue: void 0,\n    _x_interceptor: true,\n    initialize(data2, path, key) {\n      return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);\n    }\n  };\n  mutateObj(obj);\n  return (initialValue) => {\n    if (typeof initialValue === \"object\" && initialValue !== null && initialValue._x_interceptor) {\n      let initialize = obj.initialize.bind(obj);\n      obj.initialize = (data2, path, key) => {\n        let innerValue = initialValue.initialize(data2, path, key);\n        obj.initialValue = innerValue;\n        return initialize(data2, path, key);\n      };\n    } else {\n      obj.initialValue = initialValue;\n    }\n    return obj;\n  };\n}\nfunction get(obj, path) {\n  return path.split(\".\").reduce((carry, segment) => carry[segment], obj);\n}\nfunction set(obj, path, value) {\n  if (typeof path === \"string\")\n    path = path.split(\".\");\n  if (path.length === 1)\n    obj[path[0]] = value;\n  else if (path.length === 0)\n    throw error;\n  else {\n    if (obj[path[0]])\n      return set(obj[path[0]], path.slice(1), value);\n    else {\n      obj[path[0]] = {};\n      return set(obj[path[0]], path.slice(1), value);\n    }\n  }\n}\n\n// packages/alpinejs/src/magics.js\nvar magics = {};\nfunction magic(name, callback) {\n  magics[name] = callback;\n}\nfunction injectMagics(obj, el) {\n  Object.entries(magics).forEach(([name, callback]) => {\n    let memoizedUtilities = null;\n    function getUtilities() {\n      if (memoizedUtilities) {\n        return memoizedUtilities;\n      } else {\n        let [utilities, cleanup2] = getElementBoundUtilities(el);\n        memoizedUtilities = { interceptor, ...utilities };\n        onElRemoved(el, cleanup2);\n        return memoizedUtilities;\n      }\n    }\n    Object.defineProperty(obj, `$${name}`, {\n      get() {\n        return callback(el, getUtilities());\n      },\n      enumerable: false\n    });\n  });\n  return obj;\n}\n\n// packages/alpinejs/src/utils/error.js\nfunction tryCatch(el, expression, callback, ...args) {\n  try {\n    return callback(...args);\n  } catch (e) {\n    handleError(e, el, expression);\n  }\n}\nfunction handleError(error2, el, expression = void 0) {\n  error2 = Object.assign(\n    error2 ?? { message: \"No error message given.\" },\n    { el, expression }\n  );\n  console.warn(`Alpine Expression Error: ${error2.message}\n\n${expression ? 'Expression: \"' + expression + '\"\\n\\n' : \"\"}`, el);\n  setTimeout(() => {\n    throw error2;\n  }, 0);\n}\n\n// packages/alpinejs/src/evaluator.js\nvar shouldAutoEvaluateFunctions = true;\nfunction dontAutoEvaluateFunctions(callback) {\n  let cache = shouldAutoEvaluateFunctions;\n  shouldAutoEvaluateFunctions = false;\n  let result = callback();\n  shouldAutoEvaluateFunctions = cache;\n  return result;\n}\nfunction evaluate(el, expression, extras = {}) {\n  let result;\n  evaluateLater(el, expression)((value) => result = value, extras);\n  return result;\n}\nfunction evaluateLater(...args) {\n  return theEvaluatorFunction(...args);\n}\nvar theEvaluatorFunction = normalEvaluator;\nfunction setEvaluator(newEvaluator) {\n  theEvaluatorFunction = newEvaluator;\n}\nfunction normalEvaluator(el, expression) {\n  let overriddenMagics = {};\n  injectMagics(overriddenMagics, el);\n  let dataStack = [overriddenMagics, ...closestDataStack(el)];\n  let evaluator = typeof expression === \"function\" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);\n  return tryCatch.bind(null, el, expression, evaluator);\n}\nfunction generateEvaluatorFromFunction(dataStack, func) {\n  return (receiver = () => {\n  }, { scope: scope2 = {}, params = [] } = {}) => {\n    let result = func.apply(mergeProxies([scope2, ...dataStack]), params);\n    runIfTypeOfFunction(receiver, result);\n  };\n}\nvar evaluatorMemo = {};\nfunction generateFunctionFromString(expression, el) {\n  if (evaluatorMemo[expression]) {\n    return evaluatorMemo[expression];\n  }\n  let AsyncFunction = Object.getPrototypeOf(async function() {\n  }).constructor;\n  let rightSideSafeExpression = /^[\\n\\s]*if.*\\(.*\\)/.test(expression.trim()) || /^(let|const)\\s/.test(expression.trim()) ? `(async()=>{ ${expression} })()` : expression;\n  const safeAsyncFunction = () => {\n    try {\n      let func2 = new AsyncFunction(\n        [\"__self\", \"scope\"],\n        `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`\n      );\n      Object.defineProperty(func2, \"name\", {\n        value: `[Alpine] ${expression}`\n      });\n      return func2;\n    } catch (error2) {\n      handleError(error2, el, expression);\n      return Promise.resolve();\n    }\n  };\n  let func = safeAsyncFunction();\n  evaluatorMemo[expression] = func;\n  return func;\n}\nfunction generateEvaluatorFromString(dataStack, expression, el) {\n  let func = generateFunctionFromString(expression, el);\n  return (receiver = () => {\n  }, { scope: scope2 = {}, params = [] } = {}) => {\n    func.result = void 0;\n    func.finished = false;\n    let completeScope = mergeProxies([scope2, ...dataStack]);\n    if (typeof func === \"function\") {\n      let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));\n      if (func.finished) {\n        runIfTypeOfFunction(receiver, func.result, completeScope, params, el);\n        func.result = void 0;\n      } else {\n        promise.then((result) => {\n          runIfTypeOfFunction(receiver, result, completeScope, params, el);\n        }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);\n      }\n    }\n  };\n}\nfunction runIfTypeOfFunction(receiver, value, scope2, params, el) {\n  if (shouldAutoEvaluateFunctions && typeof value === \"function\") {\n    let result = value.apply(scope2, params);\n    if (result instanceof Promise) {\n      result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));\n    } else {\n      receiver(result);\n    }\n  } else if (typeof value === \"object\" && value instanceof Promise) {\n    value.then((i) => receiver(i));\n  } else {\n    receiver(value);\n  }\n}\n\n// packages/alpinejs/src/directives.js\nvar prefixAsString = \"x-\";\nfunction prefix(subject = \"\") {\n  return prefixAsString + subject;\n}\nfunction setPrefix(newPrefix) {\n  prefixAsString = newPrefix;\n}\nvar directiveHandlers = {};\nfunction directive(name, callback) {\n  directiveHandlers[name] = callback;\n  return {\n    before(directive2) {\n      if (!directiveHandlers[directive2]) {\n        console.warn(String.raw`Cannot find directive \\`${directive2}\\`. \\`${name}\\` will use the default order of execution`);\n        return;\n      }\n      const pos = directiveOrder.indexOf(directive2);\n      directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf(\"DEFAULT\"), 0, name);\n    }\n  };\n}\nfunction directiveExists(name) {\n  return Object.keys(directiveHandlers).includes(name);\n}\nfunction directives(el, attributes, originalAttributeOverride) {\n  attributes = Array.from(attributes);\n  if (el._x_virtualDirectives) {\n    let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({ name, value }));\n    let staticAttributes = attributesOnly(vAttributes);\n    vAttributes = vAttributes.map((attribute) => {\n      if (staticAttributes.find((attr) => attr.name === attribute.name)) {\n        return {\n          name: `x-bind:${attribute.name}`,\n          value: `\"${attribute.value}\"`\n        };\n      }\n      return attribute;\n    });\n    attributes = attributes.concat(vAttributes);\n  }\n  let transformedAttributeMap = {};\n  let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);\n  return directives2.map((directive2) => {\n    return getDirectiveHandler(el, directive2);\n  });\n}\nfunction attributesOnly(attributes) {\n  return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));\n}\nvar isDeferringHandlers = false;\nvar directiveHandlerStacks = /* @__PURE__ */ new Map();\nvar currentHandlerStackKey = Symbol();\nfunction deferHandlingDirectives(callback) {\n  isDeferringHandlers = true;\n  let key = Symbol();\n  currentHandlerStackKey = key;\n  directiveHandlerStacks.set(key, []);\n  let flushHandlers = () => {\n    while (directiveHandlerStacks.get(key).length)\n      directiveHandlerStacks.get(key).shift()();\n    directiveHandlerStacks.delete(key);\n  };\n  let stopDeferring = () => {\n    isDeferringHandlers = false;\n    flushHandlers();\n  };\n  callback(flushHandlers);\n  stopDeferring();\n}\nfunction getElementBoundUtilities(el) {\n  let cleanups = [];\n  let cleanup2 = (callback) => cleanups.push(callback);\n  let [effect3, cleanupEffect] = elementBoundEffect(el);\n  cleanups.push(cleanupEffect);\n  let utilities = {\n    Alpine: alpine_default,\n    effect: effect3,\n    cleanup: cleanup2,\n    evaluateLater: evaluateLater.bind(evaluateLater, el),\n    evaluate: evaluate.bind(evaluate, el)\n  };\n  let doCleanup = () => cleanups.forEach((i) => i());\n  return [utilities, doCleanup];\n}\nfunction getDirectiveHandler(el, directive2) {\n  let noop = () => {\n  };\n  let handler4 = directiveHandlers[directive2.type] || noop;\n  let [utilities, cleanup2] = getElementBoundUtilities(el);\n  onAttributeRemoved(el, directive2.original, cleanup2);\n  let fullHandler = () => {\n    if (el._x_ignore || el._x_ignoreSelf)\n      return;\n    handler4.inline && handler4.inline(el, directive2, utilities);\n    handler4 = handler4.bind(handler4, el, directive2, utilities);\n    isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler4) : handler4();\n  };\n  fullHandler.runCleanups = cleanup2;\n  return fullHandler;\n}\nvar startingWith = (subject, replacement) => ({ name, value }) => {\n  if (name.startsWith(subject))\n    name = name.replace(subject, replacement);\n  return { name, value };\n};\nvar into = (i) => i;\nfunction toTransformedAttributes(callback = () => {\n}) {\n  return ({ name, value }) => {\n    let { name: newName, value: newValue } = attributeTransformers.reduce((carry, transform) => {\n      return transform(carry);\n    }, { name, value });\n    if (newName !== name)\n      callback(newName, name);\n    return { name: newName, value: newValue };\n  };\n}\nvar attributeTransformers = [];\nfunction mapAttributes(callback) {\n  attributeTransformers.push(callback);\n}\nfunction outNonAlpineAttributes({ name }) {\n  return alpineAttributeRegex().test(name);\n}\nvar alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\\\b`);\nfunction toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {\n  return ({ name, value }) => {\n    let typeMatch = name.match(alpineAttributeRegex());\n    let valueMatch = name.match(/:([a-zA-Z0-9\\-_:]+)/);\n    let modifiers = name.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n    let original = originalAttributeOverride || transformedAttributeMap[name] || name;\n    return {\n      type: typeMatch ? typeMatch[1] : null,\n      value: valueMatch ? valueMatch[1] : null,\n      modifiers: modifiers.map((i) => i.replace(\".\", \"\")),\n      expression: value,\n      original\n    };\n  };\n}\nvar DEFAULT = \"DEFAULT\";\nvar directiveOrder = [\n  \"ignore\",\n  \"ref\",\n  \"data\",\n  \"id\",\n  \"anchor\",\n  \"bind\",\n  \"init\",\n  \"for\",\n  \"model\",\n  \"modelable\",\n  \"transition\",\n  \"show\",\n  \"if\",\n  DEFAULT,\n  \"teleport\"\n];\nfunction byPriority(a, b) {\n  let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;\n  let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;\n  return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\n}\n\n// packages/alpinejs/src/utils/dispatch.js\nfunction dispatch(el, name, detail = {}) {\n  el.dispatchEvent(\n    new CustomEvent(name, {\n      detail,\n      bubbles: true,\n      // Allows events to pass the shadow DOM barrier.\n      composed: true,\n      cancelable: true\n    })\n  );\n}\n\n// packages/alpinejs/src/utils/walk.js\nfunction walk(el, callback) {\n  if (typeof ShadowRoot === \"function\" && el instanceof ShadowRoot) {\n    Array.from(el.children).forEach((el2) => walk(el2, callback));\n    return;\n  }\n  let skip = false;\n  callback(el, () => skip = true);\n  if (skip)\n    return;\n  let node = el.firstElementChild;\n  while (node) {\n    walk(node, callback, false);\n    node = node.nextElementSibling;\n  }\n}\n\n// packages/alpinejs/src/utils/warn.js\nfunction warn(message, ...args) {\n  console.warn(`Alpine Warning: ${message}`, ...args);\n}\n\n// packages/alpinejs/src/lifecycle.js\nvar started = false;\nfunction start() {\n  if (started)\n    warn(\"Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.\");\n  started = true;\n  if (!document.body)\n    warn(\"Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?\");\n  dispatch(document, \"alpine:init\");\n  dispatch(document, \"alpine:initializing\");\n  startObservingMutations();\n  onElAdded((el) => initTree(el, walk));\n  onElRemoved((el) => destroyTree(el));\n  onAttributesAdded((el, attrs) => {\n    directives(el, attrs).forEach((handle) => handle());\n  });\n  let outNestedComponents = (el) => !closestRoot(el.parentElement, true);\n  Array.from(document.querySelectorAll(allSelectors().join(\",\"))).filter(outNestedComponents).forEach((el) => {\n    initTree(el);\n  });\n  dispatch(document, \"alpine:initialized\");\n  setTimeout(() => {\n    warnAboutMissingPlugins();\n  });\n}\nvar rootSelectorCallbacks = [];\nvar initSelectorCallbacks = [];\nfunction rootSelectors() {\n  return rootSelectorCallbacks.map((fn) => fn());\n}\nfunction allSelectors() {\n  return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());\n}\nfunction addRootSelector(selectorCallback) {\n  rootSelectorCallbacks.push(selectorCallback);\n}\nfunction addInitSelector(selectorCallback) {\n  initSelectorCallbacks.push(selectorCallback);\n}\nfunction closestRoot(el, includeInitSelectors = false) {\n  return findClosest(el, (element) => {\n    const selectors = includeInitSelectors ? allSelectors() : rootSelectors();\n    if (selectors.some((selector) => element.matches(selector)))\n      return true;\n  });\n}\nfunction findClosest(el, callback) {\n  if (!el)\n    return;\n  if (callback(el))\n    return el;\n  if (el._x_teleportBack)\n    el = el._x_teleportBack;\n  if (!el.parentElement)\n    return;\n  return findClosest(el.parentElement, callback);\n}\nfunction isRoot(el) {\n  return rootSelectors().some((selector) => el.matches(selector));\n}\nvar initInterceptors2 = [];\nfunction interceptInit(callback) {\n  initInterceptors2.push(callback);\n}\nfunction initTree(el, walker = walk, intercept = () => {\n}) {\n  deferHandlingDirectives(() => {\n    walker(el, (el2, skip) => {\n      intercept(el2, skip);\n      initInterceptors2.forEach((i) => i(el2, skip));\n      directives(el2, el2.attributes).forEach((handle) => handle());\n      el2._x_ignore && skip();\n    });\n  });\n}\nfunction destroyTree(root, walker = walk) {\n  walker(root, (el) => {\n    cleanupAttributes(el);\n    cleanupElement(el);\n  });\n}\nfunction warnAboutMissingPlugins() {\n  let pluginDirectives = [\n    [\"ui\", \"dialog\", [\"[x-dialog], [x-popover]\"]],\n    [\"anchor\", \"anchor\", [\"[x-anchor]\"]],\n    [\"sort\", \"sort\", [\"[x-sort]\"]]\n  ];\n  pluginDirectives.forEach(([plugin2, directive2, selectors]) => {\n    if (directiveExists(directive2))\n      return;\n    selectors.some((selector) => {\n      if (document.querySelector(selector)) {\n        warn(`found \"${selector}\", but missing ${plugin2} plugin`);\n        return true;\n      }\n    });\n  });\n}\n\n// packages/alpinejs/src/nextTick.js\nvar tickStack = [];\nvar isHolding = false;\nfunction nextTick(callback = () => {\n}) {\n  queueMicrotask(() => {\n    isHolding || setTimeout(() => {\n      releaseNextTicks();\n    });\n  });\n  return new Promise((res) => {\n    tickStack.push(() => {\n      callback();\n      res();\n    });\n  });\n}\nfunction releaseNextTicks() {\n  isHolding = false;\n  while (tickStack.length)\n    tickStack.shift()();\n}\nfunction holdNextTicks() {\n  isHolding = true;\n}\n\n// packages/alpinejs/src/utils/classes.js\nfunction setClasses(el, value) {\n  if (Array.isArray(value)) {\n    return setClassesFromString(el, value.join(\" \"));\n  } else if (typeof value === \"object\" && value !== null) {\n    return setClassesFromObject(el, value);\n  } else if (typeof value === \"function\") {\n    return setClasses(el, value());\n  }\n  return setClassesFromString(el, value);\n}\nfunction setClassesFromString(el, classString) {\n  let split = (classString2) => classString2.split(\" \").filter(Boolean);\n  let missingClasses = (classString2) => classString2.split(\" \").filter((i) => !el.classList.contains(i)).filter(Boolean);\n  let addClassesAndReturnUndo = (classes) => {\n    el.classList.add(...classes);\n    return () => {\n      el.classList.remove(...classes);\n    };\n  };\n  classString = classString === true ? classString = \"\" : classString || \"\";\n  return addClassesAndReturnUndo(missingClasses(classString));\n}\nfunction setClassesFromObject(el, classObject) {\n  let split = (classString) => classString.split(\" \").filter(Boolean);\n  let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);\n  let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);\n  let added = [];\n  let removed = [];\n  forRemove.forEach((i) => {\n    if (el.classList.contains(i)) {\n      el.classList.remove(i);\n      removed.push(i);\n    }\n  });\n  forAdd.forEach((i) => {\n    if (!el.classList.contains(i)) {\n      el.classList.add(i);\n      added.push(i);\n    }\n  });\n  return () => {\n    removed.forEach((i) => el.classList.add(i));\n    added.forEach((i) => el.classList.remove(i));\n  };\n}\n\n// packages/alpinejs/src/utils/styles.js\nfunction setStyles(el, value) {\n  if (typeof value === \"object\" && value !== null) {\n    return setStylesFromObject(el, value);\n  }\n  return setStylesFromString(el, value);\n}\nfunction setStylesFromObject(el, value) {\n  let previousStyles = {};\n  Object.entries(value).forEach(([key, value2]) => {\n    previousStyles[key] = el.style[key];\n    if (!key.startsWith(\"--\")) {\n      key = kebabCase(key);\n    }\n    el.style.setProperty(key, value2);\n  });\n  setTimeout(() => {\n    if (el.style.length === 0) {\n      el.removeAttribute(\"style\");\n    }\n  });\n  return () => {\n    setStyles(el, previousStyles);\n  };\n}\nfunction setStylesFromString(el, value) {\n  let cache = el.getAttribute(\"style\", value);\n  el.setAttribute(\"style\", value);\n  return () => {\n    el.setAttribute(\"style\", cache || \"\");\n  };\n}\nfunction kebabCase(subject) {\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\n// packages/alpinejs/src/utils/once.js\nfunction once(callback, fallback = () => {\n}) {\n  let called = false;\n  return function() {\n    if (!called) {\n      called = true;\n      callback.apply(this, arguments);\n    } else {\n      fallback.apply(this, arguments);\n    }\n  };\n}\n\n// packages/alpinejs/src/directives/x-transition.js\ndirective(\"transition\", (el, { value, modifiers, expression }, { evaluate: evaluate2 }) => {\n  if (typeof expression === \"function\")\n    expression = evaluate2(expression);\n  if (expression === false)\n    return;\n  if (!expression || typeof expression === \"boolean\") {\n    registerTransitionsFromHelper(el, modifiers, value);\n  } else {\n    registerTransitionsFromClassString(el, expression, value);\n  }\n});\nfunction registerTransitionsFromClassString(el, classString, stage) {\n  registerTransitionObject(el, setClasses, \"\");\n  let directiveStorageMap = {\n    \"enter\": (classes) => {\n      el._x_transition.enter.during = classes;\n    },\n    \"enter-start\": (classes) => {\n      el._x_transition.enter.start = classes;\n    },\n    \"enter-end\": (classes) => {\n      el._x_transition.enter.end = classes;\n    },\n    \"leave\": (classes) => {\n      el._x_transition.leave.during = classes;\n    },\n    \"leave-start\": (classes) => {\n      el._x_transition.leave.start = classes;\n    },\n    \"leave-end\": (classes) => {\n      el._x_transition.leave.end = classes;\n    }\n  };\n  directiveStorageMap[stage](classString);\n}\nfunction registerTransitionsFromHelper(el, modifiers, stage) {\n  registerTransitionObject(el, setStyles);\n  let doesntSpecify = !modifiers.includes(\"in\") && !modifiers.includes(\"out\") && !stage;\n  let transitioningIn = doesntSpecify || modifiers.includes(\"in\") || [\"enter\"].includes(stage);\n  let transitioningOut = doesntSpecify || modifiers.includes(\"out\") || [\"leave\"].includes(stage);\n  if (modifiers.includes(\"in\") && !doesntSpecify) {\n    modifiers = modifiers.filter((i, index) => index < modifiers.indexOf(\"out\"));\n  }\n  if (modifiers.includes(\"out\") && !doesntSpecify) {\n    modifiers = modifiers.filter((i, index) => index > modifiers.indexOf(\"out\"));\n  }\n  let wantsAll = !modifiers.includes(\"opacity\") && !modifiers.includes(\"scale\");\n  let wantsOpacity = wantsAll || modifiers.includes(\"opacity\");\n  let wantsScale = wantsAll || modifiers.includes(\"scale\");\n  let opacityValue = wantsOpacity ? 0 : 1;\n  let scaleValue = wantsScale ? modifierValue(modifiers, \"scale\", 95) / 100 : 1;\n  let delay = modifierValue(modifiers, \"delay\", 0) / 1e3;\n  let origin = modifierValue(modifiers, \"origin\", \"center\");\n  let property = \"opacity, transform\";\n  let durationIn = modifierValue(modifiers, \"duration\", 150) / 1e3;\n  let durationOut = modifierValue(modifiers, \"duration\", 75) / 1e3;\n  let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\n  if (transitioningIn) {\n    el._x_transition.enter.during = {\n      transformOrigin: origin,\n      transitionDelay: `${delay}s`,\n      transitionProperty: property,\n      transitionDuration: `${durationIn}s`,\n      transitionTimingFunction: easing\n    };\n    el._x_transition.enter.start = {\n      opacity: opacityValue,\n      transform: `scale(${scaleValue})`\n    };\n    el._x_transition.enter.end = {\n      opacity: 1,\n      transform: `scale(1)`\n    };\n  }\n  if (transitioningOut) {\n    el._x_transition.leave.during = {\n      transformOrigin: origin,\n      transitionDelay: `${delay}s`,\n      transitionProperty: property,\n      transitionDuration: `${durationOut}s`,\n      transitionTimingFunction: easing\n    };\n    el._x_transition.leave.start = {\n      opacity: 1,\n      transform: `scale(1)`\n    };\n    el._x_transition.leave.end = {\n      opacity: opacityValue,\n      transform: `scale(${scaleValue})`\n    };\n  }\n}\nfunction registerTransitionObject(el, setFunction, defaultValue = {}) {\n  if (!el._x_transition)\n    el._x_transition = {\n      enter: { during: defaultValue, start: defaultValue, end: defaultValue },\n      leave: { during: defaultValue, start: defaultValue, end: defaultValue },\n      in(before = () => {\n      }, after = () => {\n      }) {\n        transition(el, setFunction, {\n          during: this.enter.during,\n          start: this.enter.start,\n          end: this.enter.end\n        }, before, after);\n      },\n      out(before = () => {\n      }, after = () => {\n      }) {\n        transition(el, setFunction, {\n          during: this.leave.during,\n          start: this.leave.start,\n          end: this.leave.end\n        }, before, after);\n      }\n    };\n}\nwindow.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {\n  const nextTick2 = document.visibilityState === \"visible\" ? requestAnimationFrame : setTimeout;\n  let clickAwayCompatibleShow = () => nextTick2(show);\n  if (value) {\n    if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {\n      el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();\n    } else {\n      el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();\n    }\n    return;\n  }\n  el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {\n    el._x_transition.out(() => {\n    }, () => resolve(hide));\n    el._x_transitioning && el._x_transitioning.beforeCancel(() => reject({ isFromCancelledTransition: true }));\n  }) : Promise.resolve(hide);\n  queueMicrotask(() => {\n    let closest = closestHide(el);\n    if (closest) {\n      if (!closest._x_hideChildren)\n        closest._x_hideChildren = [];\n      closest._x_hideChildren.push(el);\n    } else {\n      nextTick2(() => {\n        let hideAfterChildren = (el2) => {\n          let carry = Promise.all([\n            el2._x_hidePromise,\n            ...(el2._x_hideChildren || []).map(hideAfterChildren)\n          ]).then(([i]) => i?.());\n          delete el2._x_hidePromise;\n          delete el2._x_hideChildren;\n          return carry;\n        };\n        hideAfterChildren(el).catch((e) => {\n          if (!e.isFromCancelledTransition)\n            throw e;\n        });\n      });\n    }\n  });\n};\nfunction closestHide(el) {\n  let parent = el.parentNode;\n  if (!parent)\n    return;\n  return parent._x_hidePromise ? parent : closestHide(parent);\n}\nfunction transition(el, setFunction, { during, start: start2, end } = {}, before = () => {\n}, after = () => {\n}) {\n  if (el._x_transitioning)\n    el._x_transitioning.cancel();\n  if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {\n    before();\n    after();\n    return;\n  }\n  let undoStart, undoDuring, undoEnd;\n  performTransition(el, {\n    start() {\n      undoStart = setFunction(el, start2);\n    },\n    during() {\n      undoDuring = setFunction(el, during);\n    },\n    before,\n    end() {\n      undoStart();\n      undoEnd = setFunction(el, end);\n    },\n    after,\n    cleanup() {\n      undoDuring();\n      undoEnd();\n    }\n  });\n}\nfunction performTransition(el, stages) {\n  let interrupted, reachedBefore, reachedEnd;\n  let finish = once(() => {\n    mutateDom(() => {\n      interrupted = true;\n      if (!reachedBefore)\n        stages.before();\n      if (!reachedEnd) {\n        stages.end();\n        releaseNextTicks();\n      }\n      stages.after();\n      if (el.isConnected)\n        stages.cleanup();\n      delete el._x_transitioning;\n    });\n  });\n  el._x_transitioning = {\n    beforeCancels: [],\n    beforeCancel(callback) {\n      this.beforeCancels.push(callback);\n    },\n    cancel: once(function() {\n      while (this.beforeCancels.length) {\n        this.beforeCancels.shift()();\n      }\n      ;\n      finish();\n    }),\n    finish\n  };\n  mutateDom(() => {\n    stages.start();\n    stages.during();\n  });\n  holdNextTicks();\n  requestAnimationFrame(() => {\n    if (interrupted)\n      return;\n    let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\n    let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\n    if (duration === 0)\n      duration = Number(getComputedStyle(el).animationDuration.replace(\"s\", \"\")) * 1e3;\n    mutateDom(() => {\n      stages.before();\n    });\n    reachedBefore = true;\n    requestAnimationFrame(() => {\n      if (interrupted)\n        return;\n      mutateDom(() => {\n        stages.end();\n      });\n      releaseNextTicks();\n      setTimeout(el._x_transitioning.finish, duration + delay);\n      reachedEnd = true;\n    });\n  });\n}\nfunction modifierValue(modifiers, key, fallback) {\n  if (modifiers.indexOf(key) === -1)\n    return fallback;\n  const rawValue = modifiers[modifiers.indexOf(key) + 1];\n  if (!rawValue)\n    return fallback;\n  if (key === \"scale\") {\n    if (isNaN(rawValue))\n      return fallback;\n  }\n  if (key === \"duration\" || key === \"delay\") {\n    let match = rawValue.match(/([0-9]+)ms/);\n    if (match)\n      return match[1];\n  }\n  if (key === \"origin\") {\n    if ([\"top\", \"right\", \"left\", \"center\", \"bottom\"].includes(modifiers[modifiers.indexOf(key) + 2])) {\n      return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(\" \");\n    }\n  }\n  return rawValue;\n}\n\n// packages/alpinejs/src/clone.js\nvar isCloning = false;\nfunction skipDuringClone(callback, fallback = () => {\n}) {\n  return (...args) => isCloning ? fallback(...args) : callback(...args);\n}\nfunction onlyDuringClone(callback) {\n  return (...args) => isCloning && callback(...args);\n}\nvar interceptors = [];\nfunction interceptClone(callback) {\n  interceptors.push(callback);\n}\nfunction cloneNode(from, to) {\n  interceptors.forEach((i) => i(from, to));\n  isCloning = true;\n  dontRegisterReactiveSideEffects(() => {\n    initTree(to, (el, callback) => {\n      callback(el, () => {\n      });\n    });\n  });\n  isCloning = false;\n}\nvar isCloningLegacy = false;\nfunction clone(oldEl, newEl) {\n  if (!newEl._x_dataStack)\n    newEl._x_dataStack = oldEl._x_dataStack;\n  isCloning = true;\n  isCloningLegacy = true;\n  dontRegisterReactiveSideEffects(() => {\n    cloneTree(newEl);\n  });\n  isCloning = false;\n  isCloningLegacy = false;\n}\nfunction cloneTree(el) {\n  let hasRunThroughFirstEl = false;\n  let shallowWalker = (el2, callback) => {\n    walk(el2, (el3, skip) => {\n      if (hasRunThroughFirstEl && isRoot(el3))\n        return skip();\n      hasRunThroughFirstEl = true;\n      callback(el3, skip);\n    });\n  };\n  initTree(el, shallowWalker);\n}\nfunction dontRegisterReactiveSideEffects(callback) {\n  let cache = effect;\n  overrideEffect((callback2, el) => {\n    let storedEffect = cache(callback2);\n    release(storedEffect);\n    return () => {\n    };\n  });\n  callback();\n  overrideEffect(cache);\n}\n\n// packages/alpinejs/src/utils/bind.js\nfunction bind(el, name, value, modifiers = []) {\n  if (!el._x_bindings)\n    el._x_bindings = reactive({});\n  el._x_bindings[name] = value;\n  name = modifiers.includes(\"camel\") ? camelCase(name) : name;\n  switch (name) {\n    case \"value\":\n      bindInputValue(el, value);\n      break;\n    case \"style\":\n      bindStyles(el, value);\n      break;\n    case \"class\":\n      bindClasses(el, value);\n      break;\n    case \"selected\":\n    case \"checked\":\n      bindAttributeAndProperty(el, name, value);\n      break;\n    default:\n      bindAttribute(el, name, value);\n      break;\n  }\n}\nfunction bindInputValue(el, value) {\n  if (el.type === \"radio\") {\n    if (el.attributes.value === void 0) {\n      el.value = value;\n    }\n    if (window.fromModel) {\n      if (typeof value === \"boolean\") {\n        el.checked = safeParseBoolean(el.value) === value;\n      } else {\n        el.checked = checkedAttrLooseCompare(el.value, value);\n      }\n    }\n  } else if (el.type === \"checkbox\") {\n    if (Number.isInteger(value)) {\n      el.value = value;\n    } else if (!Array.isArray(value) && typeof value !== \"boolean\" && ![null, void 0].includes(value)) {\n      el.value = String(value);\n    } else {\n      if (Array.isArray(value)) {\n        el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));\n      } else {\n        el.checked = !!value;\n      }\n    }\n  } else if (el.tagName === \"SELECT\") {\n    updateSelect(el, value);\n  } else {\n    if (el.value === value)\n      return;\n    el.value = value === void 0 ? \"\" : value;\n  }\n}\nfunction bindClasses(el, value) {\n  if (el._x_undoAddedClasses)\n    el._x_undoAddedClasses();\n  el._x_undoAddedClasses = setClasses(el, value);\n}\nfunction bindStyles(el, value) {\n  if (el._x_undoAddedStyles)\n    el._x_undoAddedStyles();\n  el._x_undoAddedStyles = setStyles(el, value);\n}\nfunction bindAttributeAndProperty(el, name, value) {\n  bindAttribute(el, name, value);\n  setPropertyIfChanged(el, name, value);\n}\nfunction bindAttribute(el, name, value) {\n  if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {\n    el.removeAttribute(name);\n  } else {\n    if (isBooleanAttr(name))\n      value = name;\n    setIfChanged(el, name, value);\n  }\n}\nfunction setIfChanged(el, attrName, value) {\n  if (el.getAttribute(attrName) != value) {\n    el.setAttribute(attrName, value);\n  }\n}\nfunction setPropertyIfChanged(el, propName, value) {\n  if (el[propName] !== value) {\n    el[propName] = value;\n  }\n}\nfunction updateSelect(el, value) {\n  const arrayWrappedValue = [].concat(value).map((value2) => {\n    return value2 + \"\";\n  });\n  Array.from(el.options).forEach((option) => {\n    option.selected = arrayWrappedValue.includes(option.value);\n  });\n}\nfunction camelCase(subject) {\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n}\nfunction checkedAttrLooseCompare(valueA, valueB) {\n  return valueA == valueB;\n}\nfunction safeParseBoolean(rawValue) {\n  if ([1, \"1\", \"true\", \"on\", \"yes\", true].includes(rawValue)) {\n    return true;\n  }\n  if ([0, \"0\", \"false\", \"off\", \"no\", false].includes(rawValue)) {\n    return false;\n  }\n  return rawValue ? Boolean(rawValue) : null;\n}\nfunction isBooleanAttr(attrName) {\n  const booleanAttributes = [\n    \"disabled\",\n    \"checked\",\n    \"required\",\n    \"readonly\",\n    \"open\",\n    \"selected\",\n    \"autofocus\",\n    \"itemscope\",\n    \"multiple\",\n    \"novalidate\",\n    \"allowfullscreen\",\n    \"allowpaymentrequest\",\n    \"formnovalidate\",\n    \"autoplay\",\n    \"controls\",\n    \"loop\",\n    \"muted\",\n    \"playsinline\",\n    \"default\",\n    \"ismap\",\n    \"reversed\",\n    \"async\",\n    \"defer\",\n    \"nomodule\"\n  ];\n  return booleanAttributes.includes(attrName);\n}\nfunction attributeShouldntBePreservedIfFalsy(name) {\n  return ![\"aria-pressed\", \"aria-checked\", \"aria-expanded\", \"aria-selected\"].includes(name);\n}\nfunction getBinding(el, name, fallback) {\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\n    return el._x_bindings[name];\n  return getAttributeBinding(el, name, fallback);\n}\nfunction extractProp(el, name, fallback, extract = true) {\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\n    return el._x_bindings[name];\n  if (el._x_inlineBindings && el._x_inlineBindings[name] !== void 0) {\n    let binding = el._x_inlineBindings[name];\n    binding.extract = extract;\n    return dontAutoEvaluateFunctions(() => {\n      return evaluate(el, binding.expression);\n    });\n  }\n  return getAttributeBinding(el, name, fallback);\n}\nfunction getAttributeBinding(el, name, fallback) {\n  let attr = el.getAttribute(name);\n  if (attr === null)\n    return typeof fallback === \"function\" ? fallback() : fallback;\n  if (attr === \"\")\n    return true;\n  if (isBooleanAttr(name)) {\n    return !![name, \"true\"].includes(attr);\n  }\n  return attr;\n}\n\n// packages/alpinejs/src/utils/debounce.js\nfunction debounce(func, wait) {\n  var timeout;\n  return function() {\n    var context = this, args = arguments;\n    var later = function() {\n      timeout = null;\n      func.apply(context, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n// packages/alpinejs/src/utils/throttle.js\nfunction throttle(func, limit) {\n  let inThrottle;\n  return function() {\n    let context = this, args = arguments;\n    if (!inThrottle) {\n      func.apply(context, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// packages/alpinejs/src/entangle.js\nfunction entangle({ get: outerGet, set: outerSet }, { get: innerGet, set: innerSet }) {\n  let firstRun = true;\n  let outerHash;\n  let innerHash;\n  let reference = effect(() => {\n    let outer = outerGet();\n    let inner = innerGet();\n    if (firstRun) {\n      innerSet(cloneIfObject(outer));\n      firstRun = false;\n    } else {\n      let outerHashLatest = JSON.stringify(outer);\n      let innerHashLatest = JSON.stringify(inner);\n      if (outerHashLatest !== outerHash) {\n        innerSet(cloneIfObject(outer));\n      } else if (outerHashLatest !== innerHashLatest) {\n        outerSet(cloneIfObject(inner));\n      } else {\n      }\n    }\n    outerHash = JSON.stringify(outerGet());\n    innerHash = JSON.stringify(innerGet());\n  });\n  return () => {\n    release(reference);\n  };\n}\nfunction cloneIfObject(value) {\n  return typeof value === \"object\" ? JSON.parse(JSON.stringify(value)) : value;\n}\n\n// packages/alpinejs/src/plugin.js\nfunction plugin(callback) {\n  let callbacks = Array.isArray(callback) ? callback : [callback];\n  callbacks.forEach((i) => i(alpine_default));\n}\n\n// packages/alpinejs/src/store.js\nvar stores = {};\nvar isReactive = false;\nfunction store(name, value) {\n  if (!isReactive) {\n    stores = reactive(stores);\n    isReactive = true;\n  }\n  if (value === void 0) {\n    return stores[name];\n  }\n  stores[name] = value;\n  if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"init\") && typeof value.init === \"function\") {\n    stores[name].init();\n  }\n  initInterceptors(stores[name]);\n}\nfunction getStores() {\n  return stores;\n}\n\n// packages/alpinejs/src/binds.js\nvar binds = {};\nfunction bind2(name, bindings) {\n  let getBindings = typeof bindings !== \"function\" ? () => bindings : bindings;\n  if (name instanceof Element) {\n    return applyBindingsObject(name, getBindings());\n  } else {\n    binds[name] = getBindings;\n  }\n  return () => {\n  };\n}\nfunction injectBindingProviders(obj) {\n  Object.entries(binds).forEach(([name, callback]) => {\n    Object.defineProperty(obj, name, {\n      get() {\n        return (...args) => {\n          return callback(...args);\n        };\n      }\n    });\n  });\n  return obj;\n}\nfunction applyBindingsObject(el, obj, original) {\n  let cleanupRunners = [];\n  while (cleanupRunners.length)\n    cleanupRunners.pop()();\n  let attributes = Object.entries(obj).map(([name, value]) => ({ name, value }));\n  let staticAttributes = attributesOnly(attributes);\n  attributes = attributes.map((attribute) => {\n    if (staticAttributes.find((attr) => attr.name === attribute.name)) {\n      return {\n        name: `x-bind:${attribute.name}`,\n        value: `\"${attribute.value}\"`\n      };\n    }\n    return attribute;\n  });\n  directives(el, attributes, original).map((handle) => {\n    cleanupRunners.push(handle.runCleanups);\n    handle();\n  });\n  return () => {\n    while (cleanupRunners.length)\n      cleanupRunners.pop()();\n  };\n}\n\n// packages/alpinejs/src/datas.js\nvar datas = {};\nfunction data(name, callback) {\n  datas[name] = callback;\n}\nfunction injectDataProviders(obj, context) {\n  Object.entries(datas).forEach(([name, callback]) => {\n    Object.defineProperty(obj, name, {\n      get() {\n        return (...args) => {\n          return callback.bind(context)(...args);\n        };\n      },\n      enumerable: false\n    });\n  });\n  return obj;\n}\n\n// packages/alpinejs/src/alpine.js\nvar Alpine = {\n  get reactive() {\n    return reactive;\n  },\n  get release() {\n    return release;\n  },\n  get effect() {\n    return effect;\n  },\n  get raw() {\n    return raw;\n  },\n  version: \"3.14.1\",\n  flushAndStopDeferringMutations,\n  dontAutoEvaluateFunctions,\n  disableEffectScheduling,\n  startObservingMutations,\n  stopObservingMutations,\n  setReactivityEngine,\n  onAttributeRemoved,\n  onAttributesAdded,\n  closestDataStack,\n  skipDuringClone,\n  onlyDuringClone,\n  addRootSelector,\n  addInitSelector,\n  interceptClone,\n  addScopeToNode,\n  deferMutations,\n  mapAttributes,\n  evaluateLater,\n  interceptInit,\n  setEvaluator,\n  mergeProxies,\n  extractProp,\n  findClosest,\n  onElRemoved,\n  closestRoot,\n  destroyTree,\n  interceptor,\n  // INTERNAL: not public API and is subject to change without major release.\n  transition,\n  // INTERNAL\n  setStyles,\n  // INTERNAL\n  mutateDom,\n  directive,\n  entangle,\n  throttle,\n  debounce,\n  evaluate,\n  initTree,\n  nextTick,\n  prefixed: prefix,\n  prefix: setPrefix,\n  plugin,\n  magic,\n  store,\n  start,\n  clone,\n  // INTERNAL\n  cloneNode,\n  // INTERNAL\n  bound: getBinding,\n  $data: scope,\n  watch,\n  walk,\n  data,\n  bind: bind2\n};\nvar alpine_default = Alpine;\n\n// node_modules/@vue/shared/dist/shared.esm-bundler.js\nfunction makeMap(str, expectsLowerCase) {\n  const map = /* @__PURE__ */ Object.create(null);\n  const list = str.split(\",\");\n  for (let i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];\n}\nvar specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\nvar isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);\nvar EMPTY_OBJ =  true ? Object.freeze({}) : 0;\nvar EMPTY_ARR =  true ? Object.freeze([]) : 0;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar hasOwn = (val, key) => hasOwnProperty.call(val, key);\nvar isArray = Array.isArray;\nvar isMap = (val) => toTypeString(val) === \"[object Map]\";\nvar isString = (val) => typeof val === \"string\";\nvar isSymbol = (val) => typeof val === \"symbol\";\nvar isObject = (val) => val !== null && typeof val === \"object\";\nvar objectToString = Object.prototype.toString;\nvar toTypeString = (value) => objectToString.call(value);\nvar toRawType = (value) => {\n  return toTypeString(value).slice(8, -1);\n};\nvar isIntegerKey = (key) => isString(key) && key !== \"NaN\" && key[0] !== \"-\" && \"\" + parseInt(key, 10) === key;\nvar cacheStringFunction = (fn) => {\n  const cache = /* @__PURE__ */ Object.create(null);\n  return (str) => {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n};\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cacheStringFunction((str) => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \"\");\n});\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, \"-$1\").toLowerCase());\nvar capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\nvar toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);\nvar hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\n\n// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\nvar targetMap = /* @__PURE__ */ new WeakMap();\nvar effectStack = [];\nvar activeEffect;\nvar ITERATE_KEY = Symbol( true ? \"iterate\" : 0);\nvar MAP_KEY_ITERATE_KEY = Symbol( true ? \"Map key iterate\" : 0);\nfunction isEffect(fn) {\n  return fn && fn._isEffect === true;\n}\nfunction effect2(fn, options = EMPTY_OBJ) {\n  if (isEffect(fn)) {\n    fn = fn.raw;\n  }\n  const effect3 = createReactiveEffect(fn, options);\n  if (!options.lazy) {\n    effect3();\n  }\n  return effect3;\n}\nfunction stop(effect3) {\n  if (effect3.active) {\n    cleanup(effect3);\n    if (effect3.options.onStop) {\n      effect3.options.onStop();\n    }\n    effect3.active = false;\n  }\n}\nvar uid = 0;\nfunction createReactiveEffect(fn, options) {\n  const effect3 = function reactiveEffect() {\n    if (!effect3.active) {\n      return fn();\n    }\n    if (!effectStack.includes(effect3)) {\n      cleanup(effect3);\n      try {\n        enableTracking();\n        effectStack.push(effect3);\n        activeEffect = effect3;\n        return fn();\n      } finally {\n        effectStack.pop();\n        resetTracking();\n        activeEffect = effectStack[effectStack.length - 1];\n      }\n    }\n  };\n  effect3.id = uid++;\n  effect3.allowRecurse = !!options.allowRecurse;\n  effect3._isEffect = true;\n  effect3.active = true;\n  effect3.raw = fn;\n  effect3.deps = [];\n  effect3.options = options;\n  return effect3;\n}\nfunction cleanup(effect3) {\n  const { deps } = effect3;\n  if (deps.length) {\n    for (let i = 0; i < deps.length; i++) {\n      deps[i].delete(effect3);\n    }\n    deps.length = 0;\n  }\n}\nvar shouldTrack = true;\nvar trackStack = [];\nfunction pauseTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = false;\n}\nfunction enableTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = true;\n}\nfunction resetTracking() {\n  const last = trackStack.pop();\n  shouldTrack = last === void 0 ? true : last;\n}\nfunction track(target, type, key) {\n  if (!shouldTrack || activeEffect === void 0) {\n    return;\n  }\n  let depsMap = targetMap.get(target);\n  if (!depsMap) {\n    targetMap.set(target, depsMap = /* @__PURE__ */ new Map());\n  }\n  let dep = depsMap.get(key);\n  if (!dep) {\n    depsMap.set(key, dep = /* @__PURE__ */ new Set());\n  }\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n    activeEffect.deps.push(dep);\n    if (activeEffect.options.onTrack) {\n      activeEffect.options.onTrack({\n        effect: activeEffect,\n        target,\n        type,\n        key\n      });\n    }\n  }\n}\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\n  const depsMap = targetMap.get(target);\n  if (!depsMap) {\n    return;\n  }\n  const effects = /* @__PURE__ */ new Set();\n  const add2 = (effectsToAdd) => {\n    if (effectsToAdd) {\n      effectsToAdd.forEach((effect3) => {\n        if (effect3 !== activeEffect || effect3.allowRecurse) {\n          effects.add(effect3);\n        }\n      });\n    }\n  };\n  if (type === \"clear\") {\n    depsMap.forEach(add2);\n  } else if (key === \"length\" && isArray(target)) {\n    depsMap.forEach((dep, key2) => {\n      if (key2 === \"length\" || key2 >= newValue) {\n        add2(dep);\n      }\n    });\n  } else {\n    if (key !== void 0) {\n      add2(depsMap.get(key));\n    }\n    switch (type) {\n      case \"add\":\n        if (!isArray(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n          if (isMap(target)) {\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\n          }\n        } else if (isIntegerKey(key)) {\n          add2(depsMap.get(\"length\"));\n        }\n        break;\n      case \"delete\":\n        if (!isArray(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n          if (isMap(target)) {\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\n          }\n        }\n        break;\n      case \"set\":\n        if (isMap(target)) {\n          add2(depsMap.get(ITERATE_KEY));\n        }\n        break;\n    }\n  }\n  const run = (effect3) => {\n    if (effect3.options.onTrigger) {\n      effect3.options.onTrigger({\n        effect: effect3,\n        target,\n        key,\n        type,\n        newValue,\n        oldValue,\n        oldTarget\n      });\n    }\n    if (effect3.options.scheduler) {\n      effect3.options.scheduler(effect3);\n    } else {\n      effect3();\n    }\n  };\n  effects.forEach(run);\n}\nvar isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);\nvar builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));\nvar get2 = /* @__PURE__ */ createGetter();\nvar readonlyGet = /* @__PURE__ */ createGetter(true);\nvar arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();\nfunction createArrayInstrumentations() {\n  const instrumentations = {};\n  [\"includes\", \"indexOf\", \"lastIndexOf\"].forEach((key) => {\n    instrumentations[key] = function(...args) {\n      const arr = toRaw(this);\n      for (let i = 0, l = this.length; i < l; i++) {\n        track(arr, \"get\", i + \"\");\n      }\n      const res = arr[key](...args);\n      if (res === -1 || res === false) {\n        return arr[key](...args.map(toRaw));\n      } else {\n        return res;\n      }\n    };\n  });\n  [\"push\", \"pop\", \"shift\", \"unshift\", \"splice\"].forEach((key) => {\n    instrumentations[key] = function(...args) {\n      pauseTracking();\n      const res = toRaw(this)[key].apply(this, args);\n      resetTracking();\n      return res;\n    };\n  });\n  return instrumentations;\n}\nfunction createGetter(isReadonly = false, shallow = false) {\n  return function get3(target, key, receiver) {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly;\n    } else if (key === \"__v_raw\" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {\n      return target;\n    }\n    const targetIsArray = isArray(target);\n    if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\n      return Reflect.get(arrayInstrumentations, key, receiver);\n    }\n    const res = Reflect.get(target, key, receiver);\n    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\n      return res;\n    }\n    if (!isReadonly) {\n      track(target, \"get\", key);\n    }\n    if (shallow) {\n      return res;\n    }\n    if (isRef(res)) {\n      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\n      return shouldUnwrap ? res.value : res;\n    }\n    if (isObject(res)) {\n      return isReadonly ? readonly(res) : reactive2(res);\n    }\n    return res;\n  };\n}\nvar set2 = /* @__PURE__ */ createSetter();\nfunction createSetter(shallow = false) {\n  return function set3(target, key, value, receiver) {\n    let oldValue = target[key];\n    if (!shallow) {\n      value = toRaw(value);\n      oldValue = toRaw(oldValue);\n      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {\n        oldValue.value = value;\n        return true;\n      }\n    }\n    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);\n    const result = Reflect.set(target, key, value, receiver);\n    if (target === toRaw(receiver)) {\n      if (!hadKey) {\n        trigger(target, \"add\", key, value);\n      } else if (hasChanged(value, oldValue)) {\n        trigger(target, \"set\", key, value, oldValue);\n      }\n    }\n    return result;\n  };\n}\nfunction deleteProperty(target, key) {\n  const hadKey = hasOwn(target, key);\n  const oldValue = target[key];\n  const result = Reflect.deleteProperty(target, key);\n  if (result && hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction has(target, key) {\n  const result = Reflect.has(target, key);\n  if (!isSymbol(key) || !builtInSymbols.has(key)) {\n    track(target, \"has\", key);\n  }\n  return result;\n}\nfunction ownKeys(target) {\n  track(target, \"iterate\", isArray(target) ? \"length\" : ITERATE_KEY);\n  return Reflect.ownKeys(target);\n}\nvar mutableHandlers = {\n  get: get2,\n  set: set2,\n  deleteProperty,\n  has,\n  ownKeys\n};\nvar readonlyHandlers = {\n  get: readonlyGet,\n  set(target, key) {\n    if (true) {\n      console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  },\n  deleteProperty(target, key) {\n    if (true) {\n      console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n    return true;\n  }\n};\nvar toReactive = (value) => isObject(value) ? reactive2(value) : value;\nvar toReadonly = (value) => isObject(value) ? readonly(value) : value;\nvar toShallow = (value) => value;\nvar getProto = (v) => Reflect.getPrototypeOf(v);\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\n  target = target[\n    \"__v_raw\"\n    /* RAW */\n  ];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (key !== rawKey) {\n    !isReadonly && track(rawTarget, \"get\", key);\n  }\n  !isReadonly && track(rawTarget, \"get\", rawKey);\n  const { has: has2 } = getProto(rawTarget);\n  const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n  if (has2.call(rawTarget, key)) {\n    return wrap(target.get(key));\n  } else if (has2.call(rawTarget, rawKey)) {\n    return wrap(target.get(rawKey));\n  } else if (target !== rawTarget) {\n    target.get(key);\n  }\n}\nfunction has$1(key, isReadonly = false) {\n  const target = this[\n    \"__v_raw\"\n    /* RAW */\n  ];\n  const rawTarget = toRaw(target);\n  const rawKey = toRaw(key);\n  if (key !== rawKey) {\n    !isReadonly && track(rawTarget, \"has\", key);\n  }\n  !isReadonly && track(rawTarget, \"has\", rawKey);\n  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);\n}\nfunction size(target, isReadonly = false) {\n  target = target[\n    \"__v_raw\"\n    /* RAW */\n  ];\n  !isReadonly && track(toRaw(target), \"iterate\", ITERATE_KEY);\n  return Reflect.get(target, \"size\", target);\n}\nfunction add(value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const proto = getProto(target);\n  const hadKey = proto.has.call(target, value);\n  if (!hadKey) {\n    target.add(value);\n    trigger(target, \"add\", value, value);\n  }\n  return this;\n}\nfunction set$1(key, value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const { has: has2, get: get3 } = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get3.call(target, key);\n  target.set(key, value);\n  if (!hadKey) {\n    trigger(target, \"add\", key, value);\n  } else if (hasChanged(value, oldValue)) {\n    trigger(target, \"set\", key, value, oldValue);\n  }\n  return this;\n}\nfunction deleteEntry(key) {\n  const target = toRaw(this);\n  const { has: has2, get: get3 } = getProto(target);\n  let hadKey = has2.call(target, key);\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has2.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has2, key);\n  }\n  const oldValue = get3 ? get3.call(target, key) : void 0;\n  const result = target.delete(key);\n  if (hadKey) {\n    trigger(target, \"delete\", key, void 0, oldValue);\n  }\n  return result;\n}\nfunction clear() {\n  const target = toRaw(this);\n  const hadItems = target.size !== 0;\n  const oldTarget =  true ? isMap(target) ? new Map(target) : new Set(target) : 0;\n  const result = target.clear();\n  if (hadItems) {\n    trigger(target, \"clear\", void 0, void 0, oldTarget);\n  }\n  return result;\n}\nfunction createForEach(isReadonly, isShallow) {\n  return function forEach(callback, thisArg) {\n    const observed = this;\n    const target = observed[\n      \"__v_raw\"\n      /* RAW */\n    ];\n    const rawTarget = toRaw(target);\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n    !isReadonly && track(rawTarget, \"iterate\", ITERATE_KEY);\n    return target.forEach((value, key) => {\n      return callback.call(thisArg, wrap(value), wrap(key), observed);\n    });\n  };\n}\nfunction createIterableMethod(method, isReadonly, isShallow) {\n  return function(...args) {\n    const target = this[\n      \"__v_raw\"\n      /* RAW */\n    ];\n    const rawTarget = toRaw(target);\n    const targetIsMap = isMap(rawTarget);\n    const isPair = method === \"entries\" || method === Symbol.iterator && targetIsMap;\n    const isKeyOnly = method === \"keys\" && targetIsMap;\n    const innerIterator = target[method](...args);\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\n    !isReadonly && track(rawTarget, \"iterate\", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\n    return {\n      // iterator protocol\n      next() {\n        const { value, done } = innerIterator.next();\n        return done ? { value, done } : {\n          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\n          done\n        };\n      },\n      // iterable protocol\n      [Symbol.iterator]() {\n        return this;\n      }\n    };\n  };\n}\nfunction createReadonlyMethod(type) {\n  return function(...args) {\n    if (true) {\n      const key = args[0] ? `on key \"${args[0]}\" ` : ``;\n      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\n    }\n    return type === \"delete\" ? false : this;\n  };\n}\nfunction createInstrumentations() {\n  const mutableInstrumentations2 = {\n    get(key) {\n      return get$1(this, key);\n    },\n    get size() {\n      return size(this);\n    },\n    has: has$1,\n    add,\n    set: set$1,\n    delete: deleteEntry,\n    clear,\n    forEach: createForEach(false, false)\n  };\n  const shallowInstrumentations2 = {\n    get(key) {\n      return get$1(this, key, false, true);\n    },\n    get size() {\n      return size(this);\n    },\n    has: has$1,\n    add,\n    set: set$1,\n    delete: deleteEntry,\n    clear,\n    forEach: createForEach(false, true)\n  };\n  const readonlyInstrumentations2 = {\n    get(key) {\n      return get$1(this, key, true);\n    },\n    get size() {\n      return size(this, true);\n    },\n    has(key) {\n      return has$1.call(this, key, true);\n    },\n    add: createReadonlyMethod(\n      \"add\"\n      /* ADD */\n    ),\n    set: createReadonlyMethod(\n      \"set\"\n      /* SET */\n    ),\n    delete: createReadonlyMethod(\n      \"delete\"\n      /* DELETE */\n    ),\n    clear: createReadonlyMethod(\n      \"clear\"\n      /* CLEAR */\n    ),\n    forEach: createForEach(true, false)\n  };\n  const shallowReadonlyInstrumentations2 = {\n    get(key) {\n      return get$1(this, key, true, true);\n    },\n    get size() {\n      return size(this, true);\n    },\n    has(key) {\n      return has$1.call(this, key, true);\n    },\n    add: createReadonlyMethod(\n      \"add\"\n      /* ADD */\n    ),\n    set: createReadonlyMethod(\n      \"set\"\n      /* SET */\n    ),\n    delete: createReadonlyMethod(\n      \"delete\"\n      /* DELETE */\n    ),\n    clear: createReadonlyMethod(\n      \"clear\"\n      /* CLEAR */\n    ),\n    forEach: createForEach(true, true)\n  };\n  const iteratorMethods = [\"keys\", \"values\", \"entries\", Symbol.iterator];\n  iteratorMethods.forEach((method) => {\n    mutableInstrumentations2[method] = createIterableMethod(method, false, false);\n    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);\n    shallowInstrumentations2[method] = createIterableMethod(method, false, true);\n    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);\n  });\n  return [\n    mutableInstrumentations2,\n    readonlyInstrumentations2,\n    shallowInstrumentations2,\n    shallowReadonlyInstrumentations2\n  ];\n}\nvar [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();\nfunction createInstrumentationGetter(isReadonly, shallow) {\n  const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;\n  return (target, key, receiver) => {\n    if (key === \"__v_isReactive\") {\n      return !isReadonly;\n    } else if (key === \"__v_isReadonly\") {\n      return isReadonly;\n    } else if (key === \"__v_raw\") {\n      return target;\n    }\n    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);\n  };\n}\nvar mutableCollectionHandlers = {\n  get: /* @__PURE__ */ createInstrumentationGetter(false, false)\n};\nvar readonlyCollectionHandlers = {\n  get: /* @__PURE__ */ createInstrumentationGetter(true, false)\n};\nfunction checkIdentityKeys(target, has2, key) {\n  const rawKey = toRaw(key);\n  if (rawKey !== key && has2.call(target, rawKey)) {\n    const type = toRawType(target);\n    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);\n  }\n}\nvar reactiveMap = /* @__PURE__ */ new WeakMap();\nvar shallowReactiveMap = /* @__PURE__ */ new WeakMap();\nvar readonlyMap = /* @__PURE__ */ new WeakMap();\nvar shallowReadonlyMap = /* @__PURE__ */ new WeakMap();\nfunction targetTypeMap(rawType) {\n  switch (rawType) {\n    case \"Object\":\n    case \"Array\":\n      return 1;\n    case \"Map\":\n    case \"Set\":\n    case \"WeakMap\":\n    case \"WeakSet\":\n      return 2;\n    default:\n      return 0;\n  }\n}\nfunction getTargetType(value) {\n  return value[\n    \"__v_skip\"\n    /* SKIP */\n  ] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));\n}\nfunction reactive2(target) {\n  if (target && target[\n    \"__v_isReadonly\"\n    /* IS_READONLY */\n  ]) {\n    return target;\n  }\n  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\n}\nfunction readonly(target) {\n  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\n}\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\n  if (!isObject(target)) {\n    if (true) {\n      console.warn(`value cannot be made reactive: ${String(target)}`);\n    }\n    return target;\n  }\n  if (target[\n    \"__v_raw\"\n    /* RAW */\n  ] && !(isReadonly && target[\n    \"__v_isReactive\"\n    /* IS_REACTIVE */\n  ])) {\n    return target;\n  }\n  const existingProxy = proxyMap.get(target);\n  if (existingProxy) {\n    return existingProxy;\n  }\n  const targetType = getTargetType(target);\n  if (targetType === 0) {\n    return target;\n  }\n  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);\n  proxyMap.set(target, proxy);\n  return proxy;\n}\nfunction toRaw(observed) {\n  return observed && toRaw(observed[\n    \"__v_raw\"\n    /* RAW */\n  ]) || observed;\n}\nfunction isRef(r) {\n  return Boolean(r && r.__v_isRef === true);\n}\n\n// packages/alpinejs/src/magics/$nextTick.js\nmagic(\"nextTick\", () => nextTick);\n\n// packages/alpinejs/src/magics/$dispatch.js\nmagic(\"dispatch\", (el) => dispatch.bind(dispatch, el));\n\n// packages/alpinejs/src/magics/$watch.js\nmagic(\"watch\", (el, { evaluateLater: evaluateLater2, cleanup: cleanup2 }) => (key, callback) => {\n  let evaluate2 = evaluateLater2(key);\n  let getter = () => {\n    let value;\n    evaluate2((i) => value = i);\n    return value;\n  };\n  let unwatch = watch(getter, callback);\n  cleanup2(unwatch);\n});\n\n// packages/alpinejs/src/magics/$store.js\nmagic(\"store\", getStores);\n\n// packages/alpinejs/src/magics/$data.js\nmagic(\"data\", (el) => scope(el));\n\n// packages/alpinejs/src/magics/$root.js\nmagic(\"root\", (el) => closestRoot(el));\n\n// packages/alpinejs/src/magics/$refs.js\nmagic(\"refs\", (el) => {\n  if (el._x_refs_proxy)\n    return el._x_refs_proxy;\n  el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));\n  return el._x_refs_proxy;\n});\nfunction getArrayOfRefObject(el) {\n  let refObjects = [];\n  findClosest(el, (i) => {\n    if (i._x_refs)\n      refObjects.push(i._x_refs);\n  });\n  return refObjects;\n}\n\n// packages/alpinejs/src/ids.js\nvar globalIdMemo = {};\nfunction findAndIncrementId(name) {\n  if (!globalIdMemo[name])\n    globalIdMemo[name] = 0;\n  return ++globalIdMemo[name];\n}\nfunction closestIdRoot(el, name) {\n  return findClosest(el, (element) => {\n    if (element._x_ids && element._x_ids[name])\n      return true;\n  });\n}\nfunction setIdRoot(el, name) {\n  if (!el._x_ids)\n    el._x_ids = {};\n  if (!el._x_ids[name])\n    el._x_ids[name] = findAndIncrementId(name);\n}\n\n// packages/alpinejs/src/magics/$id.js\nmagic(\"id\", (el, { cleanup: cleanup2 }) => (name, key = null) => {\n  let cacheKey = `${name}${key ? `-${key}` : \"\"}`;\n  return cacheIdByNameOnElement(el, cacheKey, cleanup2, () => {\n    let root = closestIdRoot(el, name);\n    let id = root ? root._x_ids[name] : findAndIncrementId(name);\n    return key ? `${name}-${id}-${key}` : `${name}-${id}`;\n  });\n});\ninterceptClone((from, to) => {\n  if (from._x_id) {\n    to._x_id = from._x_id;\n  }\n});\nfunction cacheIdByNameOnElement(el, cacheKey, cleanup2, callback) {\n  if (!el._x_id)\n    el._x_id = {};\n  if (el._x_id[cacheKey])\n    return el._x_id[cacheKey];\n  let output = callback();\n  el._x_id[cacheKey] = output;\n  cleanup2(() => {\n    delete el._x_id[cacheKey];\n  });\n  return output;\n}\n\n// packages/alpinejs/src/magics/$el.js\nmagic(\"el\", (el) => el);\n\n// packages/alpinejs/src/magics/index.js\nwarnMissingPluginMagic(\"Focus\", \"focus\", \"focus\");\nwarnMissingPluginMagic(\"Persist\", \"persist\", \"persist\");\nfunction warnMissingPluginMagic(name, magicName, slug) {\n  magic(magicName, (el) => warn(`You can't use [$${magicName}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\n}\n\n// packages/alpinejs/src/directives/x-modelable.js\ndirective(\"modelable\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2 }) => {\n  let func = evaluateLater2(expression);\n  let innerGet = () => {\n    let result;\n    func((i) => result = i);\n    return result;\n  };\n  let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);\n  let innerSet = (val) => evaluateInnerSet(() => {\n  }, { scope: { \"__placeholder\": val } });\n  let initialValue = innerGet();\n  innerSet(initialValue);\n  queueMicrotask(() => {\n    if (!el._x_model)\n      return;\n    el._x_removeModelListeners[\"default\"]();\n    let outerGet = el._x_model.get;\n    let outerSet = el._x_model.set;\n    let releaseEntanglement = entangle(\n      {\n        get() {\n          return outerGet();\n        },\n        set(value) {\n          outerSet(value);\n        }\n      },\n      {\n        get() {\n          return innerGet();\n        },\n        set(value) {\n          innerSet(value);\n        }\n      }\n    );\n    cleanup2(releaseEntanglement);\n  });\n});\n\n// packages/alpinejs/src/directives/x-teleport.js\ndirective(\"teleport\", (el, { modifiers, expression }, { cleanup: cleanup2 }) => {\n  if (el.tagName.toLowerCase() !== \"template\")\n    warn(\"x-teleport can only be used on a <template> tag\", el);\n  let target = getTarget(expression);\n  let clone2 = el.content.cloneNode(true).firstElementChild;\n  el._x_teleport = clone2;\n  clone2._x_teleportBack = el;\n  el.setAttribute(\"data-teleport-template\", true);\n  clone2.setAttribute(\"data-teleport-target\", true);\n  if (el._x_forwardEvents) {\n    el._x_forwardEvents.forEach((eventName) => {\n      clone2.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        el.dispatchEvent(new e.constructor(e.type, e));\n      });\n    });\n  }\n  addScopeToNode(clone2, {}, el);\n  let placeInDom = (clone3, target2, modifiers2) => {\n    if (modifiers2.includes(\"prepend\")) {\n      target2.parentNode.insertBefore(clone3, target2);\n    } else if (modifiers2.includes(\"append\")) {\n      target2.parentNode.insertBefore(clone3, target2.nextSibling);\n    } else {\n      target2.appendChild(clone3);\n    }\n  };\n  mutateDom(() => {\n    placeInDom(clone2, target, modifiers);\n    skipDuringClone(() => {\n      initTree(clone2);\n      clone2._x_ignore = true;\n    })();\n  });\n  el._x_teleportPutBack = () => {\n    let target2 = getTarget(expression);\n    mutateDom(() => {\n      placeInDom(el._x_teleport, target2, modifiers);\n    });\n  };\n  cleanup2(() => clone2.remove());\n});\nvar teleportContainerDuringClone = document.createElement(\"div\");\nfunction getTarget(expression) {\n  let target = skipDuringClone(() => {\n    return document.querySelector(expression);\n  }, () => {\n    return teleportContainerDuringClone;\n  })();\n  if (!target)\n    warn(`Cannot find x-teleport element for selector: \"${expression}\"`);\n  return target;\n}\n\n// packages/alpinejs/src/directives/x-ignore.js\nvar handler = () => {\n};\nhandler.inline = (el, { modifiers }, { cleanup: cleanup2 }) => {\n  modifiers.includes(\"self\") ? el._x_ignoreSelf = true : el._x_ignore = true;\n  cleanup2(() => {\n    modifiers.includes(\"self\") ? delete el._x_ignoreSelf : delete el._x_ignore;\n  });\n};\ndirective(\"ignore\", handler);\n\n// packages/alpinejs/src/directives/x-effect.js\ndirective(\"effect\", skipDuringClone((el, { expression }, { effect: effect3 }) => {\n  effect3(evaluateLater(el, expression));\n}));\n\n// packages/alpinejs/src/utils/on.js\nfunction on(el, event, modifiers, callback) {\n  let listenerTarget = el;\n  let handler4 = (e) => callback(e);\n  let options = {};\n  let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);\n  if (modifiers.includes(\"dot\"))\n    event = dotSyntax(event);\n  if (modifiers.includes(\"camel\"))\n    event = camelCase2(event);\n  if (modifiers.includes(\"passive\"))\n    options.passive = true;\n  if (modifiers.includes(\"capture\"))\n    options.capture = true;\n  if (modifiers.includes(\"window\"))\n    listenerTarget = window;\n  if (modifiers.includes(\"document\"))\n    listenerTarget = document;\n  if (modifiers.includes(\"debounce\")) {\n    let nextModifier = modifiers[modifiers.indexOf(\"debounce\") + 1] || \"invalid-wait\";\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\n    handler4 = debounce(handler4, wait);\n  }\n  if (modifiers.includes(\"throttle\")) {\n    let nextModifier = modifiers[modifiers.indexOf(\"throttle\") + 1] || \"invalid-wait\";\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\n    handler4 = throttle(handler4, wait);\n  }\n  if (modifiers.includes(\"prevent\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.preventDefault();\n      next(e);\n    });\n  if (modifiers.includes(\"stop\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.stopPropagation();\n      next(e);\n    });\n  if (modifiers.includes(\"once\")) {\n    handler4 = wrapHandler(handler4, (next, e) => {\n      next(e);\n      listenerTarget.removeEventListener(event, handler4, options);\n    });\n  }\n  if (modifiers.includes(\"away\") || modifiers.includes(\"outside\")) {\n    listenerTarget = document;\n    handler4 = wrapHandler(handler4, (next, e) => {\n      if (el.contains(e.target))\n        return;\n      if (e.target.isConnected === false)\n        return;\n      if (el.offsetWidth < 1 && el.offsetHeight < 1)\n        return;\n      if (el._x_isShown === false)\n        return;\n      next(e);\n    });\n  }\n  if (modifiers.includes(\"self\"))\n    handler4 = wrapHandler(handler4, (next, e) => {\n      e.target === el && next(e);\n    });\n  if (isKeyEvent(event) || isClickEvent(event)) {\n    handler4 = wrapHandler(handler4, (next, e) => {\n      if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\n        return;\n      }\n      next(e);\n    });\n  }\n  listenerTarget.addEventListener(event, handler4, options);\n  return () => {\n    listenerTarget.removeEventListener(event, handler4, options);\n  };\n}\nfunction dotSyntax(subject) {\n  return subject.replace(/-/g, \".\");\n}\nfunction camelCase2(subject) {\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n}\nfunction isNumeric(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\nfunction kebabCase2(subject) {\n  if ([\" \", \"_\"].includes(\n    subject\n  ))\n    return subject;\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[_\\s]/, \"-\").toLowerCase();\n}\nfunction isKeyEvent(event) {\n  return [\"keydown\", \"keyup\"].includes(event);\n}\nfunction isClickEvent(event) {\n  return [\"contextmenu\", \"click\", \"mouse\"].some((i) => event.includes(i));\n}\nfunction isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\n  let keyModifiers = modifiers.filter((i) => {\n    return ![\"window\", \"document\", \"prevent\", \"stop\", \"once\", \"capture\", \"self\", \"away\", \"outside\", \"passive\"].includes(i);\n  });\n  if (keyModifiers.includes(\"debounce\")) {\n    let debounceIndex = keyModifiers.indexOf(\"debounce\");\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\n  }\n  if (keyModifiers.includes(\"throttle\")) {\n    let debounceIndex = keyModifiers.indexOf(\"throttle\");\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\n  }\n  if (keyModifiers.length === 0)\n    return false;\n  if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))\n    return false;\n  const systemKeyModifiers = [\"ctrl\", \"shift\", \"alt\", \"meta\", \"cmd\", \"super\"];\n  const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));\n  keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));\n  if (selectedSystemKeyModifiers.length > 0) {\n    const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {\n      if (modifier === \"cmd\" || modifier === \"super\")\n        modifier = \"meta\";\n      return e[`${modifier}Key`];\n    });\n    if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\n      if (isClickEvent(e.type))\n        return false;\n      if (keyToModifiers(e.key).includes(keyModifiers[0]))\n        return false;\n    }\n  }\n  return true;\n}\nfunction keyToModifiers(key) {\n  if (!key)\n    return [];\n  key = kebabCase2(key);\n  let modifierToKeyMap = {\n    \"ctrl\": \"control\",\n    \"slash\": \"/\",\n    \"space\": \" \",\n    \"spacebar\": \" \",\n    \"cmd\": \"meta\",\n    \"esc\": \"escape\",\n    \"up\": \"arrow-up\",\n    \"down\": \"arrow-down\",\n    \"left\": \"arrow-left\",\n    \"right\": \"arrow-right\",\n    \"period\": \".\",\n    \"comma\": \",\",\n    \"equal\": \"=\",\n    \"minus\": \"-\",\n    \"underscore\": \"_\"\n  };\n  modifierToKeyMap[key] = key;\n  return Object.keys(modifierToKeyMap).map((modifier) => {\n    if (modifierToKeyMap[modifier] === key)\n      return modifier;\n  }).filter((modifier) => modifier);\n}\n\n// packages/alpinejs/src/directives/x-model.js\ndirective(\"model\", (el, { modifiers, expression }, { effect: effect3, cleanup: cleanup2 }) => {\n  let scopeTarget = el;\n  if (modifiers.includes(\"parent\")) {\n    scopeTarget = el.parentNode;\n  }\n  let evaluateGet = evaluateLater(scopeTarget, expression);\n  let evaluateSet;\n  if (typeof expression === \"string\") {\n    evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);\n  } else if (typeof expression === \"function\" && typeof expression() === \"string\") {\n    evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);\n  } else {\n    evaluateSet = () => {\n    };\n  }\n  let getValue = () => {\n    let result;\n    evaluateGet((value) => result = value);\n    return isGetterSetter(result) ? result.get() : result;\n  };\n  let setValue = (value) => {\n    let result;\n    evaluateGet((value2) => result = value2);\n    if (isGetterSetter(result)) {\n      result.set(value);\n    } else {\n      evaluateSet(() => {\n      }, {\n        scope: { \"__placeholder\": value }\n      });\n    }\n  };\n  if (typeof expression === \"string\" && el.type === \"radio\") {\n    mutateDom(() => {\n      if (!el.hasAttribute(\"name\"))\n        el.setAttribute(\"name\", expression);\n    });\n  }\n  var event = el.tagName.toLowerCase() === \"select\" || [\"checkbox\", \"radio\"].includes(el.type) || modifiers.includes(\"lazy\") ? \"change\" : \"input\";\n  let removeListener = isCloning ? () => {\n  } : on(el, event, modifiers, (e) => {\n    setValue(getInputValue(el, modifiers, e, getValue()));\n  });\n  if (modifiers.includes(\"fill\")) {\n    if ([void 0, null, \"\"].includes(getValue()) || el.type === \"checkbox\" && Array.isArray(getValue()) || el.tagName.toLowerCase() === \"select\" && el.multiple) {\n      setValue(\n        getInputValue(el, modifiers, { target: el }, getValue())\n      );\n    }\n  }\n  if (!el._x_removeModelListeners)\n    el._x_removeModelListeners = {};\n  el._x_removeModelListeners[\"default\"] = removeListener;\n  cleanup2(() => el._x_removeModelListeners[\"default\"]());\n  if (el.form) {\n    let removeResetListener = on(el.form, \"reset\", [], (e) => {\n      nextTick(() => el._x_model && el._x_model.set(getInputValue(el, modifiers, { target: el }, getValue())));\n    });\n    cleanup2(() => removeResetListener());\n  }\n  el._x_model = {\n    get() {\n      return getValue();\n    },\n    set(value) {\n      setValue(value);\n    }\n  };\n  el._x_forceModelUpdate = (value) => {\n    if (value === void 0 && typeof expression === \"string\" && expression.match(/\\./))\n      value = \"\";\n    window.fromModel = true;\n    mutateDom(() => bind(el, \"value\", value));\n    delete window.fromModel;\n  };\n  effect3(() => {\n    let value = getValue();\n    if (modifiers.includes(\"unintrusive\") && document.activeElement.isSameNode(el))\n      return;\n    el._x_forceModelUpdate(value);\n  });\n});\nfunction getInputValue(el, modifiers, event, currentValue) {\n  return mutateDom(() => {\n    if (event instanceof CustomEvent && event.detail !== void 0)\n      return event.detail !== null && event.detail !== void 0 ? event.detail : event.target.value;\n    else if (el.type === \"checkbox\") {\n      if (Array.isArray(currentValue)) {\n        let newValue = null;\n        if (modifiers.includes(\"number\")) {\n          newValue = safeParseNumber(event.target.value);\n        } else if (modifiers.includes(\"boolean\")) {\n          newValue = safeParseBoolean(event.target.value);\n        } else {\n          newValue = event.target.value;\n        }\n        return event.target.checked ? currentValue.includes(newValue) ? currentValue : currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));\n      } else {\n        return event.target.checked;\n      }\n    } else if (el.tagName.toLowerCase() === \"select\" && el.multiple) {\n      if (modifiers.includes(\"number\")) {\n        return Array.from(event.target.selectedOptions).map((option) => {\n          let rawValue = option.value || option.text;\n          return safeParseNumber(rawValue);\n        });\n      } else if (modifiers.includes(\"boolean\")) {\n        return Array.from(event.target.selectedOptions).map((option) => {\n          let rawValue = option.value || option.text;\n          return safeParseBoolean(rawValue);\n        });\n      }\n      return Array.from(event.target.selectedOptions).map((option) => {\n        return option.value || option.text;\n      });\n    } else {\n      let newValue;\n      if (el.type === \"radio\") {\n        if (event.target.checked) {\n          newValue = event.target.value;\n        } else {\n          newValue = currentValue;\n        }\n      } else {\n        newValue = event.target.value;\n      }\n      if (modifiers.includes(\"number\")) {\n        return safeParseNumber(newValue);\n      } else if (modifiers.includes(\"boolean\")) {\n        return safeParseBoolean(newValue);\n      } else if (modifiers.includes(\"trim\")) {\n        return newValue.trim();\n      } else {\n        return newValue;\n      }\n    }\n  });\n}\nfunction safeParseNumber(rawValue) {\n  let number = rawValue ? parseFloat(rawValue) : null;\n  return isNumeric2(number) ? number : rawValue;\n}\nfunction checkedAttrLooseCompare2(valueA, valueB) {\n  return valueA == valueB;\n}\nfunction isNumeric2(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\nfunction isGetterSetter(value) {\n  return value !== null && typeof value === \"object\" && typeof value.get === \"function\" && typeof value.set === \"function\";\n}\n\n// packages/alpinejs/src/directives/x-cloak.js\ndirective(\"cloak\", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix(\"cloak\")))));\n\n// packages/alpinejs/src/directives/x-init.js\naddInitSelector(() => `[${prefix(\"init\")}]`);\ndirective(\"init\", skipDuringClone((el, { expression }, { evaluate: evaluate2 }) => {\n  if (typeof expression === \"string\") {\n    return !!expression.trim() && evaluate2(expression, {}, false);\n  }\n  return evaluate2(expression, {}, false);\n}));\n\n// packages/alpinejs/src/directives/x-text.js\ndirective(\"text\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {\n  let evaluate2 = evaluateLater2(expression);\n  effect3(() => {\n    evaluate2((value) => {\n      mutateDom(() => {\n        el.textContent = value;\n      });\n    });\n  });\n});\n\n// packages/alpinejs/src/directives/x-html.js\ndirective(\"html\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {\n  let evaluate2 = evaluateLater2(expression);\n  effect3(() => {\n    evaluate2((value) => {\n      mutateDom(() => {\n        el.innerHTML = value;\n        el._x_ignoreSelf = true;\n        initTree(el);\n        delete el._x_ignoreSelf;\n      });\n    });\n  });\n});\n\n// packages/alpinejs/src/directives/x-bind.js\nmapAttributes(startingWith(\":\", into(prefix(\"bind:\"))));\nvar handler2 = (el, { value, modifiers, expression, original }, { effect: effect3, cleanup: cleanup2 }) => {\n  if (!value) {\n    let bindingProviders = {};\n    injectBindingProviders(bindingProviders);\n    let getBindings = evaluateLater(el, expression);\n    getBindings((bindings) => {\n      applyBindingsObject(el, bindings, original);\n    }, { scope: bindingProviders });\n    return;\n  }\n  if (value === \"key\")\n    return storeKeyForXFor(el, expression);\n  if (el._x_inlineBindings && el._x_inlineBindings[value] && el._x_inlineBindings[value].extract) {\n    return;\n  }\n  let evaluate2 = evaluateLater(el, expression);\n  effect3(() => evaluate2((result) => {\n    if (result === void 0 && typeof expression === \"string\" && expression.match(/\\./)) {\n      result = \"\";\n    }\n    mutateDom(() => bind(el, value, result, modifiers));\n  }));\n  cleanup2(() => {\n    el._x_undoAddedClasses && el._x_undoAddedClasses();\n    el._x_undoAddedStyles && el._x_undoAddedStyles();\n  });\n};\nhandler2.inline = (el, { value, modifiers, expression }) => {\n  if (!value)\n    return;\n  if (!el._x_inlineBindings)\n    el._x_inlineBindings = {};\n  el._x_inlineBindings[value] = { expression, extract: false };\n};\ndirective(\"bind\", handler2);\nfunction storeKeyForXFor(el, expression) {\n  el._x_keyExpression = expression;\n}\n\n// packages/alpinejs/src/directives/x-data.js\naddRootSelector(() => `[${prefix(\"data\")}]`);\ndirective(\"data\", (el, { expression }, { cleanup: cleanup2 }) => {\n  if (shouldSkipRegisteringDataDuringClone(el))\n    return;\n  expression = expression === \"\" ? \"{}\" : expression;\n  let magicContext = {};\n  injectMagics(magicContext, el);\n  let dataProviderContext = {};\n  injectDataProviders(dataProviderContext, magicContext);\n  let data2 = evaluate(el, expression, { scope: dataProviderContext });\n  if (data2 === void 0 || data2 === true)\n    data2 = {};\n  injectMagics(data2, el);\n  let reactiveData = reactive(data2);\n  initInterceptors(reactiveData);\n  let undo = addScopeToNode(el, reactiveData);\n  reactiveData[\"init\"] && evaluate(el, reactiveData[\"init\"]);\n  cleanup2(() => {\n    reactiveData[\"destroy\"] && evaluate(el, reactiveData[\"destroy\"]);\n    undo();\n  });\n});\ninterceptClone((from, to) => {\n  if (from._x_dataStack) {\n    to._x_dataStack = from._x_dataStack;\n    to.setAttribute(\"data-has-alpine-state\", true);\n  }\n});\nfunction shouldSkipRegisteringDataDuringClone(el) {\n  if (!isCloning)\n    return false;\n  if (isCloningLegacy)\n    return true;\n  return el.hasAttribute(\"data-has-alpine-state\");\n}\n\n// packages/alpinejs/src/directives/x-show.js\ndirective(\"show\", (el, { modifiers, expression }, { effect: effect3 }) => {\n  let evaluate2 = evaluateLater(el, expression);\n  if (!el._x_doHide)\n    el._x_doHide = () => {\n      mutateDom(() => {\n        el.style.setProperty(\"display\", \"none\", modifiers.includes(\"important\") ? \"important\" : void 0);\n      });\n    };\n  if (!el._x_doShow)\n    el._x_doShow = () => {\n      mutateDom(() => {\n        if (el.style.length === 1 && el.style.display === \"none\") {\n          el.removeAttribute(\"style\");\n        } else {\n          el.style.removeProperty(\"display\");\n        }\n      });\n    };\n  let hide = () => {\n    el._x_doHide();\n    el._x_isShown = false;\n  };\n  let show = () => {\n    el._x_doShow();\n    el._x_isShown = true;\n  };\n  let clickAwayCompatibleShow = () => setTimeout(show);\n  let toggle = once(\n    (value) => value ? show() : hide(),\n    (value) => {\n      if (typeof el._x_toggleAndCascadeWithTransitions === \"function\") {\n        el._x_toggleAndCascadeWithTransitions(el, value, show, hide);\n      } else {\n        value ? clickAwayCompatibleShow() : hide();\n      }\n    }\n  );\n  let oldValue;\n  let firstTime = true;\n  effect3(() => evaluate2((value) => {\n    if (!firstTime && value === oldValue)\n      return;\n    if (modifiers.includes(\"immediate\"))\n      value ? clickAwayCompatibleShow() : hide();\n    toggle(value);\n    oldValue = value;\n    firstTime = false;\n  }));\n});\n\n// packages/alpinejs/src/directives/x-for.js\ndirective(\"for\", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {\n  let iteratorNames = parseForExpression(expression);\n  let evaluateItems = evaluateLater(el, iteratorNames.items);\n  let evaluateKey = evaluateLater(\n    el,\n    // the x-bind:key expression is stored for our use instead of evaluated.\n    el._x_keyExpression || \"index\"\n  );\n  el._x_prevKeys = [];\n  el._x_lookup = {};\n  effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));\n  cleanup2(() => {\n    Object.values(el._x_lookup).forEach((el2) => el2.remove());\n    delete el._x_prevKeys;\n    delete el._x_lookup;\n  });\n});\nfunction loop(el, iteratorNames, evaluateItems, evaluateKey) {\n  let isObject2 = (i) => typeof i === \"object\" && !Array.isArray(i);\n  let templateEl = el;\n  evaluateItems((items) => {\n    if (isNumeric3(items) && items >= 0) {\n      items = Array.from(Array(items).keys(), (i) => i + 1);\n    }\n    if (items === void 0)\n      items = [];\n    let lookup = el._x_lookup;\n    let prevKeys = el._x_prevKeys;\n    let scopes = [];\n    let keys = [];\n    if (isObject2(items)) {\n      items = Object.entries(items).map(([key, value]) => {\n        let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);\n        evaluateKey((value2) => {\n          if (keys.includes(value2))\n            warn(\"Duplicate key on x-for\", el);\n          keys.push(value2);\n        }, { scope: { index: key, ...scope2 } });\n        scopes.push(scope2);\n      });\n    } else {\n      for (let i = 0; i < items.length; i++) {\n        let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);\n        evaluateKey((value) => {\n          if (keys.includes(value))\n            warn(\"Duplicate key on x-for\", el);\n          keys.push(value);\n        }, { scope: { index: i, ...scope2 } });\n        scopes.push(scope2);\n      }\n    }\n    let adds = [];\n    let moves = [];\n    let removes = [];\n    let sames = [];\n    for (let i = 0; i < prevKeys.length; i++) {\n      let key = prevKeys[i];\n      if (keys.indexOf(key) === -1)\n        removes.push(key);\n    }\n    prevKeys = prevKeys.filter((key) => !removes.includes(key));\n    let lastKey = \"template\";\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let prevIndex = prevKeys.indexOf(key);\n      if (prevIndex === -1) {\n        prevKeys.splice(i, 0, key);\n        adds.push([lastKey, i]);\n      } else if (prevIndex !== i) {\n        let keyInSpot = prevKeys.splice(i, 1)[0];\n        let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];\n        prevKeys.splice(i, 0, keyForSpot);\n        prevKeys.splice(prevIndex, 0, keyInSpot);\n        moves.push([keyInSpot, keyForSpot]);\n      } else {\n        sames.push(key);\n      }\n      lastKey = key;\n    }\n    for (let i = 0; i < removes.length; i++) {\n      let key = removes[i];\n      if (!!lookup[key]._x_effects) {\n        lookup[key]._x_effects.forEach(dequeueJob);\n      }\n      lookup[key].remove();\n      lookup[key] = null;\n      delete lookup[key];\n    }\n    for (let i = 0; i < moves.length; i++) {\n      let [keyInSpot, keyForSpot] = moves[i];\n      let elInSpot = lookup[keyInSpot];\n      let elForSpot = lookup[keyForSpot];\n      let marker = document.createElement(\"div\");\n      mutateDom(() => {\n        if (!elForSpot)\n          warn(`x-for \":key\" is undefined or invalid`, templateEl, keyForSpot, lookup);\n        elForSpot.after(marker);\n        elInSpot.after(elForSpot);\n        elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);\n        marker.before(elInSpot);\n        elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);\n        marker.remove();\n      });\n      elForSpot._x_refreshXForScope(scopes[keys.indexOf(keyForSpot)]);\n    }\n    for (let i = 0; i < adds.length; i++) {\n      let [lastKey2, index] = adds[i];\n      let lastEl = lastKey2 === \"template\" ? templateEl : lookup[lastKey2];\n      if (lastEl._x_currentIfEl)\n        lastEl = lastEl._x_currentIfEl;\n      let scope2 = scopes[index];\n      let key = keys[index];\n      let clone2 = document.importNode(templateEl.content, true).firstElementChild;\n      let reactiveScope = reactive(scope2);\n      addScopeToNode(clone2, reactiveScope, templateEl);\n      clone2._x_refreshXForScope = (newScope) => {\n        Object.entries(newScope).forEach(([key2, value]) => {\n          reactiveScope[key2] = value;\n        });\n      };\n      mutateDom(() => {\n        lastEl.after(clone2);\n        skipDuringClone(() => initTree(clone2))();\n      });\n      if (typeof key === \"object\") {\n        warn(\"x-for key cannot be an object, it must be a string or an integer\", templateEl);\n      }\n      lookup[key] = clone2;\n    }\n    for (let i = 0; i < sames.length; i++) {\n      lookup[sames[i]]._x_refreshXForScope(scopes[keys.indexOf(sames[i])]);\n    }\n    templateEl._x_prevKeys = keys;\n  });\n}\nfunction parseForExpression(expression) {\n  let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n  let stripParensRE = /^\\s*\\(|\\)\\s*$/g;\n  let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n  let inMatch = expression.match(forAliasRE);\n  if (!inMatch)\n    return;\n  let res = {};\n  res.items = inMatch[2].trim();\n  let item = inMatch[1].replace(stripParensRE, \"\").trim();\n  let iteratorMatch = item.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.item = item.replace(forIteratorRE, \"\").trim();\n    res.index = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.collection = iteratorMatch[2].trim();\n    }\n  } else {\n    res.item = item;\n  }\n  return res;\n}\nfunction getIterationScopeVariables(iteratorNames, item, index, items) {\n  let scopeVariables = {};\n  if (/^\\[.*\\]$/.test(iteratorNames.item) && Array.isArray(item)) {\n    let names = iteratorNames.item.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\").map((i) => i.trim());\n    names.forEach((name, i) => {\n      scopeVariables[name] = item[i];\n    });\n  } else if (/^\\{.*\\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === \"object\") {\n    let names = iteratorNames.item.replace(\"{\", \"\").replace(\"}\", \"\").split(\",\").map((i) => i.trim());\n    names.forEach((name) => {\n      scopeVariables[name] = item[name];\n    });\n  } else {\n    scopeVariables[iteratorNames.item] = item;\n  }\n  if (iteratorNames.index)\n    scopeVariables[iteratorNames.index] = index;\n  if (iteratorNames.collection)\n    scopeVariables[iteratorNames.collection] = items;\n  return scopeVariables;\n}\nfunction isNumeric3(subject) {\n  return !Array.isArray(subject) && !isNaN(subject);\n}\n\n// packages/alpinejs/src/directives/x-ref.js\nfunction handler3() {\n}\nhandler3.inline = (el, { expression }, { cleanup: cleanup2 }) => {\n  let root = closestRoot(el);\n  if (!root._x_refs)\n    root._x_refs = {};\n  root._x_refs[expression] = el;\n  cleanup2(() => delete root._x_refs[expression]);\n};\ndirective(\"ref\", handler3);\n\n// packages/alpinejs/src/directives/x-if.js\ndirective(\"if\", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {\n  if (el.tagName.toLowerCase() !== \"template\")\n    warn(\"x-if can only be used on a <template> tag\", el);\n  let evaluate2 = evaluateLater(el, expression);\n  let show = () => {\n    if (el._x_currentIfEl)\n      return el._x_currentIfEl;\n    let clone2 = el.content.cloneNode(true).firstElementChild;\n    addScopeToNode(clone2, {}, el);\n    mutateDom(() => {\n      el.after(clone2);\n      skipDuringClone(() => initTree(clone2))();\n    });\n    el._x_currentIfEl = clone2;\n    el._x_undoIf = () => {\n      walk(clone2, (node) => {\n        if (!!node._x_effects) {\n          node._x_effects.forEach(dequeueJob);\n        }\n      });\n      clone2.remove();\n      delete el._x_currentIfEl;\n    };\n    return clone2;\n  };\n  let hide = () => {\n    if (!el._x_undoIf)\n      return;\n    el._x_undoIf();\n    delete el._x_undoIf;\n  };\n  effect3(() => evaluate2((value) => {\n    value ? show() : hide();\n  }));\n  cleanup2(() => el._x_undoIf && el._x_undoIf());\n});\n\n// packages/alpinejs/src/directives/x-id.js\ndirective(\"id\", (el, { expression }, { evaluate: evaluate2 }) => {\n  let names = evaluate2(expression);\n  names.forEach((name) => setIdRoot(el, name));\n});\ninterceptClone((from, to) => {\n  if (from._x_ids) {\n    to._x_ids = from._x_ids;\n  }\n});\n\n// packages/alpinejs/src/directives/x-on.js\nmapAttributes(startingWith(\"@\", into(prefix(\"on:\"))));\ndirective(\"on\", skipDuringClone((el, { value, modifiers, expression }, { cleanup: cleanup2 }) => {\n  let evaluate2 = expression ? evaluateLater(el, expression) : () => {\n  };\n  if (el.tagName.toLowerCase() === \"template\") {\n    if (!el._x_forwardEvents)\n      el._x_forwardEvents = [];\n    if (!el._x_forwardEvents.includes(value))\n      el._x_forwardEvents.push(value);\n  }\n  let removeListener = on(el, value, modifiers, (e) => {\n    evaluate2(() => {\n    }, { scope: { \"$event\": e }, params: [e] });\n  });\n  cleanup2(() => removeListener());\n}));\n\n// packages/alpinejs/src/directives/index.js\nwarnMissingPluginDirective(\"Collapse\", \"collapse\", \"collapse\");\nwarnMissingPluginDirective(\"Intersect\", \"intersect\", \"intersect\");\nwarnMissingPluginDirective(\"Focus\", \"trap\", \"focus\");\nwarnMissingPluginDirective(\"Mask\", \"mask\", \"mask\");\nfunction warnMissingPluginDirective(name, directiveName, slug) {\n  directive(directiveName, (el) => warn(`You can't use [x-${directiveName}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\n}\n\n// packages/alpinejs/src/index.js\nalpine_default.setEvaluator(normalEvaluator);\nalpine_default.setReactivityEngine({ reactive: reactive2, effect: effect2, release: stop, raw: toRaw });\nvar src_default = alpine_default;\n\n// packages/alpinejs/builds/module.js\nvar module_default = src_default;\n\n\n\n//# sourceURL=webpack://your-project-name/./node_modules/alpinejs/dist/module.esm.js?");

/***/ }),

/***/ "./static/js/datePicker.js":
/*!*********************************!*\
  !*** ./static/js/datePicker.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ datePicker)\n/* harmony export */ });\nfunction datePicker(day, index) {\n  return {\n    showDatepicker: false,\n    dateValue: '',\n    month: '',\n    year: '',\n    days: [],\n    blankdays: [],\n    MONTH_NAMES: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    DAYS: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    init: function init() {\n      var _this = this;\n      this.dateValue = day.date;\n      this.syncCalendar();\n      this.$watch('day.date', function (newValue) {\n        _this.dateValue = newValue;\n        _this.syncCalendar();\n      });\n    },\n    syncCalendar: function syncCalendar() {\n      if (this.dateValue) {\n        var date = new Date(this.dateValue);\n        this.month = date.getMonth();\n        this.year = date.getFullYear();\n      } else {\n        var _date = new Date();\n        this.month = _date.getMonth();\n        this.year = _date.getFullYear();\n      }\n      this.generateDays();\n    },\n    generateDays: function generateDays() {\n      var daysInMonth = new Date(this.year, this.month + 1, 0).getDate();\n      var dayOfWeek = new Date(this.year, this.month, 1).getDay();\n      this.blankdays = Array(dayOfWeek).fill('');\n      this.days = Array.from({\n        length: daysInMonth\n      }, function (_, i) {\n        return i + 1;\n      });\n    },\n    isToday: function isToday(date) {\n      var today = new Date();\n      var d = new Date(this.year, this.month, date);\n      return today.toDateString() === d.toDateString();\n    },\n    isSelected: function isSelected(date) {\n      if (!this.dateValue) return false;\n      var d = new Date(this.year, this.month, date);\n      var selected = new Date(this.dateValue);\n      return d.toDateString() === selected.toDateString();\n    },\n    selectDate: function selectDate(date) {\n      var selectedDate = new Date(this.year, this.month, date);\n      var offset = selectedDate.getTimezoneOffset();\n      selectedDate = new Date(selectedDate.getTime() - offset * 60 * 1000);\n      var formattedDate = selectedDate.toISOString().split('T')[0];\n      this.dateValue = formattedDate;\n      day.date = formattedDate;\n      this.showDatepicker = false;\n      if (index === 0) {\n        window.dispatchEvent(new CustomEvent('first-day-changed'));\n      }\n    },\n    formatDateForDisplay: function formatDateForDisplay(dateStr) {\n      if (!dateStr) return '';\n      var date = new Date(dateStr);\n      var day = date.getDate().toString().padStart(2, '0');\n      var month = this.MONTH_NAMES[date.getMonth()].slice(0, 3);\n      var year = date.getFullYear().toString().slice(-2);\n      return \"\".concat(day, \"-\").concat(month, \"-\").concat(year);\n    },\n    incrementMonth: function incrementMonth() {\n      if (this.month === 11) {\n        this.month = 0;\n        this.year++;\n      } else {\n        this.month++;\n      }\n      this.generateDays();\n    },\n    decrementMonth: function decrementMonth() {\n      if (this.month === 0) {\n        this.month = 11;\n        this.year--;\n      } else {\n        this.month--;\n      }\n      this.generateDays();\n    }\n  };\n}\n\n//# sourceURL=webpack://your-project-name/./static/js/datePicker.js?");

/***/ }),

/***/ "./static/js/index.js":
/*!****************************!*\
  !*** ./static/js/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/styles.css */ \"./static/css/styles.css\");\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/module.esm.js\");\n/* harmony import */ var _imacrayon_alpine_ajax__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @imacrayon/alpine-ajax */ \"./node_modules/@imacrayon/alpine-ajax/dist/module.esm.js\");\n/* harmony import */ var _alpinejs_persist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @alpinejs/persist */ \"./node_modules/@alpinejs/persist/dist/module.esm.js\");\n/* harmony import */ var _tour_quote_js_tour_package_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tour_quote/js/tour_package.js */ \"./static/tour_quote/js/tour_package.js\");\n/* harmony import */ var _tour_quote_js_tour_package_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_tour_quote_js_tour_package_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _datePicker_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./datePicker.js */ \"./static/js/datePicker.js\");\n\n\n\n\n\n\n\n// Initialize Alpine and plugins\n// Register datePicker component\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].data('datePicker', _datePicker_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\nwindow.Alpine = alpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].plugin(_imacrayon_alpine_ajax__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].plugin(_alpinejs_persist__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\nalpinejs__WEBPACK_IMPORTED_MODULE_1__[\"default\"].start();\n// Your custom JavaScript here\n\n//# sourceURL=webpack://your-project-name/./static/js/index.js?");

/***/ }),

/***/ "./static/tour_quote/js/tour_package.js":
/*!**********************************************!*\
  !*** ./static/tour_quote/js/tour_package.js ***!
  \**********************************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nwindow.tourPackage = function () {\n  var _ref3;\n  function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== \"\") {\n      var cookies = document.cookie.split(\";\");\n      for (var i = 0; i < cookies.length; i++) {\n        var cookie = cookies[i].trim();\n        if (cookie.substring(0, name.length + 1) === name + \"=\") {\n          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n          break;\n        }\n      }\n    }\n    return cookieValue;\n  }\n  return _ref3 = {\n    errors: {},\n    name: \"\",\n    customerName: \"\",\n    remark: \"\",\n    remark2: \"\",\n    remark_of_hotels: \"\",\n    tourPackType: \"\",\n    selectedPredefinedQuote: \"\",\n    commission_rate_hotel: 20,\n    commission_rate_services: 5,\n    days: [{\n      date: \"\",\n      city: \"\",\n      hotel: \"\",\n      hotelCosts: [],\n      services: [],\n      guideServices: [],\n      cityServices: {\n        hotels: [],\n        service_types: []\n      }\n    }],\n    guideServices: [],\n    hotelCosts: [],\n    discounts: [],\n    extraCosts: [],\n    packageId: null,\n    packageReference: null,\n    isSuperUser: false,\n    updateServicesForPackageType: function updateServicesForPackageType() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _iterator, _step, _loop;\n        return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_this.tourPackType) {\n                _context3.next = 3;\n                break;\n              }\n              console.log('No tour package type selected');\n              return _context3.abrupt(\"return\");\n            case 3:\n              // Update services for each day\n              _iterator = _createForOfIteratorHelper(_this.days);\n              _context3.prev = 4;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var day, hotelExists;\n                return _regeneratorRuntime().wrap(function _loop$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      day = _step.value;\n                      if (!day.city) {\n                        _context2.next = 15;\n                        break;\n                      }\n                      _context2.prev = 2;\n                      _context2.next = 5;\n                      return _this.updateCityServices(day);\n                    case 5:\n                      _context2.next = 7;\n                      return Promise.all(day.services.map(/*#__PURE__*/function () {\n                        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(service) {\n                          var serviceTypeObj, updatedService;\n                          return _regeneratorRuntime().wrap(function _callee$(_context) {\n                            while (1) switch (_context.prev = _context.next) {\n                              case 0:\n                                serviceTypeObj = day.cityServices.service_types.find(function (st) {\n                                  return st.type.toLowerCase() === service.type.toLowerCase();\n                                });\n                                if (!serviceTypeObj) {\n                                  _context.next = 5;\n                                  break;\n                                }\n                                updatedService = serviceTypeObj.services.find(function (s) {\n                                  return s.id.toString() === service.name;\n                                });\n                                if (!updatedService) {\n                                  _context.next = 5;\n                                  break;\n                                }\n                                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, service), {}, {\n                                  price: parseFloat(updatedService.price) || 0,\n                                  price_at_booking: parseFloat(updatedService.price) || 0\n                                }));\n                              case 5:\n                                return _context.abrupt(\"return\", null);\n                              case 6:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }, _callee);\n                        }));\n                        return function (_x) {\n                          return _ref.apply(this, arguments);\n                        };\n                      }()));\n                    case 7:\n                      day.services = _context2.sent;\n                      // Filter out null services (ones that weren't found in new package type)\n                      day.services = day.services.filter(function (service) {\n                        return service !== null;\n                      });\n\n                      // Update hotel if it exists in new package type\n                      if (day.hotel) {\n                        hotelExists = day.cityServices.hotels.some(function (h) {\n                          return h.id.toString() === day.hotel;\n                        });\n                        if (!hotelExists) {\n                          day.hotel = ''; // Reset hotel if not available in new package type\n                        }\n                      }\n                      _context2.next = 15;\n                      break;\n                    case 12:\n                      _context2.prev = 12;\n                      _context2.t0 = _context2[\"catch\"](2);\n                      console.error('Error updating services for day:', _context2.t0);\n                    case 15:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _loop, null, [[2, 12]]);\n              });\n              _iterator.s();\n            case 7:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 11;\n                break;\n              }\n              return _context3.delegateYield(_loop(), \"t0\", 9);\n            case 9:\n              _context3.next = 7;\n              break;\n            case 11:\n              _context3.next = 16;\n              break;\n            case 13:\n              _context3.prev = 13;\n              _context3.t1 = _context3[\"catch\"](4);\n              _iterator.e(_context3.t1);\n            case 16:\n              _context3.prev = 16;\n              _iterator.f();\n              return _context3.finish(16);\n            case 19:\n              // Recalculate totals after updating all services\n              _this.calculateGrandTotal();\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee2, null, [[4, 13, 16, 19]]);\n      }))();\n    },\n    formatDateForDisplay: function formatDateForDisplay(isoDate) {\n      if (!isoDate) return '';\n      try {\n        var _isoDate$split = isoDate.split('-'),\n          _isoDate$split2 = _slicedToArray(_isoDate$split, 3),\n          year = _isoDate$split2[0],\n          month = _isoDate$split2[1],\n          day = _isoDate$split2[2];\n        return \"\".concat(day, \"/\").concat(month, \"/\").concat(year);\n      } catch (e) {\n        return '';\n      }\n    },\n    updateHotelDateDisplay: function updateHotelDateDisplay(cost) {\n      if (!cost.date) return;\n\n      // Check if input is in the format \"STARTDATE to ENDDATE\"\n      if (cost.date.includes('to')) {\n        var _cost$date$split$map = cost.date.split('to').map(function (d) {\n            return d.trim();\n          }),\n          _cost$date$split$map2 = _slicedToArray(_cost$date$split$map, 2),\n          startDate = _cost$date$split$map2[0],\n          endDate = _cost$date$split$map2[1];\n\n        // If start and end dates are the same day\n        if (startDate === endDate) {\n          cost.date = \"\".concat(startDate, \"\\nto\\n\").concat(endDate);\n        }\n        // If different days but same month and year\n        else {\n          var startParts = startDate.match(/(\\d{2})-([A-Za-z]{3})-(\\d{2})/);\n          var endParts = endDate.match(/(\\d{2})-([A-Za-z]{3})-(\\d{2})/);\n          if (startParts && endParts && startParts[2] === endParts[2] && startParts[3] === endParts[3]) {\n            cost.date = \"\".concat(startParts[1], \"-\").concat(endParts[1], \"-\").concat(startParts[2], \"-\").concat(startParts[3]);\n          } else {\n            cost.date = \"\".concat(startDate, \"\\nto\\n\").concat(endDate);\n          }\n        }\n      }\n    },\n    fetchHotelsFromTourDays: function fetchHotelsFromTourDays() {\n      var _this2 = this;\n      // Group consecutive stays by hotel\n      var hotelStays = [];\n      var currentStay = null;\n\n      // Sort days by date\n      var sortedDays = _toConsumableArray(this.days).sort(function (a, b) {\n        return new Date(a.date) - new Date(b.date);\n      });\n      sortedDays.forEach(function (day) {\n        if (!day.hotel || !day.date) return;\n\n        // Find hotel info from cityServices\n        var hotelInfo = day.cityServices.hotels.find(function (h) {\n          return h.id.toString() === day.hotel;\n        });\n        if (!hotelInfo) return;\n\n        // Check if this is a continuation of the current stay at the same hotel\n        if (currentStay && currentStay.name === hotelInfo.name) {\n          // Update end date and increment nights\n          currentStay.toDate = day.date;\n          currentStay.nights++;\n        } else {\n          // If there was a previous stay, add it to the array\n          if (currentStay) {\n            // Format and add the current stay\n            var formattedDate = _this2.formatStayDates(new Date(currentStay.date), new Date(day.date) // checkout date is same as next check-in\n            );\n            currentStay.date = formattedDate;\n            hotelStays.push(currentStay);\n          }\n\n          // Find existing cost data for this hotel\n          var existingCost = _this2.hotelCosts.find(function (cost) {\n            return cost.name === hotelInfo.name;\n          });\n\n          // Start new stay\n          currentStay = {\n            date: day.date,\n            // Temporary date, will be formatted later\n            name: hotelInfo.name,\n            type: hotelInfo.type || (existingCost ? existingCost.type : ''),\n            nights: 1,\n            room: existingCost ? existingCost.room : \"1\",\n            price: existingCost ? existingCost.price : \"0\",\n            extraBedPrice: existingCost ? existingCost.extraBedPrice : \"0\"\n          };\n        }\n      });\n\n      // Handle the last stay\n      if (currentStay) {\n        // Calculate checkout date for last stay (day after last night)\n        var lastDate = new Date(currentStay.toDate || currentStay.date);\n        var checkoutDate = new Date(lastDate);\n        checkoutDate.setDate(lastDate.getDate() + 1);\n\n        // Format the date for the last stay\n        var formattedDate = this.formatStayDates(new Date(currentStay.date), checkoutDate);\n        currentStay.date = formattedDate;\n        hotelStays.push(currentStay);\n      }\n\n      // Update hotelCosts array\n      this.hotelCosts = hotelStays.map(function (stay) {\n        return _objectSpread(_objectSpread({}, stay), {}, {\n          price: parseFloat(stay.price).toFixed(2),\n          extraBedPrice: parseFloat(stay.extraBedPrice).toFixed(2)\n        });\n      });\n\n      // Recalculate totals\n      this.$nextTick(function () {\n        _this2.calculateHotelCostTotal();\n        _this2.calculateGrandTotal();\n      });\n    },\n    // Add this new helper function\n    formatStayDates: function formatStayDates(checkIn, checkOut) {\n      var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      if (checkIn.getMonth() === checkOut.getMonth()) {\n        // Same month format: dd-dd-MMM-yy\n        return \"\".concat(checkIn.getDate().toString().padStart(2, '0'), \"-\") + \"\".concat(checkOut.getDate().toString().padStart(2, '0'), \"-\") + \"\".concat(months[checkIn.getMonth()], \"-\") + \"\".concat(checkOut.getFullYear().toString().slice(-2));\n      } else {\n        // Different months format: dd-MMM-dd-MMM-yy\n        return \"\".concat(checkIn.getDate().toString().padStart(2, '0'), \"-\") + \"\".concat(months[checkIn.getMonth()], \"-\") + \"\".concat(checkOut.getDate().toString().padStart(2, '0'), \"-\") + \"\".concat(months[checkOut.getMonth()], \"-\") + \"\".concat(checkOut.getFullYear().toString().slice(-2));\n      }\n    }\n  }, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref3, \"formatDateForDisplay\", function formatDateForDisplay(dateString) {\n    var date = new Date(dateString);\n    return date.toLocaleDateString('en-GB', {\n      day: '2-digit',\n      month: 'short',\n      year: '2-digit'\n    }).replace(/ /g, '-');\n  }), \"calculateHotelCostTotal\", function calculateHotelCostTotal() {\n    return this.hotelCosts.reduce(function (total, cost) {\n      var roomCost = (parseFloat(cost.room) || 0) * (parseFloat(cost.nights) || 0) * (parseFloat(cost.price) || 0);\n      var extraBedCost = (parseFloat(cost.nights) || 0) * (parseFloat(cost.extraBedPrice) || 0);\n      return total + roomCost + extraBedCost;\n    }, 0).toFixed(2);\n  }), \"initEditForm\", function initEditForm(existingData, isSuperUser) {\n    this.isSuperUser = isSuperUser;\n    if (existingData) {\n      this.packageReference = existingData.package_reference;\n      this.name = existingData.name;\n      this.customerName = existingData.customer_name;\n      this.remark = existingData.remark || \"\";\n      this.remark2 = existingData.remark2 || \"\";\n      this.remark_of_hotels = existingData.remark_of_hotels || \"\";\n      this.tourPackType = existingData.tour_pack_type;\n      this.commission_rate_hotel = existingData.commission_rate_hotel || 0;\n      this.commission_rate_services = existingData.commission_rate_services || 0;\n      this.days = existingData.days.map(function (day) {\n        return {\n          date: day.date,\n          city: day.city.toString(),\n          // Ensure city is a string\n          hotel: day.hotel.toString(),\n          // Ensure hotel is a string\n          services: day.services.map(function (service) {\n            return {\n              type: service.type || \"\",\n              name: (service.name || \"\").toString(),\n              price: parseFloat(service.price_at_booking) || 0,\n              price_at_booking: parseFloat(service.price_at_booking) || 0\n            };\n          }),\n          guideServices: day.guideServices.map(function (gs) {\n            return {\n              name: gs.name.toString(),\n              // Ensure guide service name is a string\n              price: parseFloat(gs.price_at_booking) || 0,\n              price_at_booking: parseFloat(gs.price_at_booking) || 0\n            };\n          }),\n          cityServices: {\n            hotels: [],\n            service_types: []\n          }\n        };\n      });\n      this.hotelCosts = existingData.hotelCosts || [];\n      this.discounts = existingData.discounts || [];\n      this.extraCosts = existingData.extraCosts || [];\n      this.initializeCityServicesForAllDays();\n    }\n  }), \"initializeCityServicesForAllDays\", function initializeCityServicesForAllDays() {\n    var _this3 = this;\n    var promises = this.days.map(function (day, index) {\n      return _this3.updateCityServices(day);\n    });\n    Promise.all(promises).then(function () {\n      _this3.days.forEach(function (day) {\n        return _this3.selectCorrectOptions(day);\n      });\n    });\n  }), \"init\", function init() {\n    var _this4 = this;\n    // Initialize with one day\n    if (this.days.length === 0) {\n      this.addDay();\n    }\n    // Initialize guide services\n    this.guideServices = window.guideServicesData || [];\n    this.$watch('days[0].date', function (newValue, oldValue) {\n      if (newValue !== oldValue) {\n        _this4.handleFirstDayDateChange();\n      }\n    });\n    if (this.guideServices.length === 0) {\n      console.warn('No guide services available');\n    } else {\n      console.log('Guide services loaded:', this.guideServices);\n    }\n\n    // Fetch guide services if they're not already available\n  }), \"addDay\", function addDay() {\n    this.days.push({\n      date: \"\",\n      city: \"\",\n      hotel: \"\",\n      services: [],\n      guideServices: [],\n      cityServices: {\n        hotels: [],\n        service_types: []\n      }\n    });\n    this.updateAllDates();\n  }), \"removeDay\", function removeDay(index) {\n    this.days.splice(index, 1);\n    this.updateAllDates();\n  }), \"addService\", function addService(day) {\n    if (!day || !Array.isArray(day.services)) {\n      console.log(\"Invalid day object or services array\");\n      return;\n    }\n    day.services.push({\n      type: \"\",\n      name: \"\",\n      price: 0\n    });\n  }), \"removeService\", function removeService(day, serviceIndex) {\n    if (!day || !Array.isArray(day.services)) {\n      console.log(\"Invalid day object or services array\");\n      return;\n    }\n    day.services.splice(serviceIndex, 1);\n  }), \"addGuideService\", function addGuideService(day) {\n    if (!day.guideServices) {\n      day.guideServices = [];\n    }\n    if (this.guideServices && this.guideServices.length > 0) {\n      var firstGuideService = this.guideServices[0];\n      day.guideServices.push({\n        name: firstGuideService.id.toString(),\n        price: parseFloat(firstGuideService.price) || 0\n      });\n      this.updateGuideService(day.guideServices[day.guideServices.length - 1]);\n    } else {\n      console.log(\"No guide services available\");\n    }\n  }), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref3, \"removeGuideService\", function removeGuideService(day, guideIndex) {\n    day.guideServices.splice(guideIndex, 1);\n  }), \"insertDayBelow\", function insertDayBelow(index) {\n    var previousDay = this.days[index];\n    var newDate;\n    if (previousDay && previousDay.date) {\n      // Create a new Date object from the previous day's date and increment it by one day\n      newDate = new Date(previousDay.date);\n      newDate.setDate(newDate.getDate() + 1);\n    } else {\n      // If there's no previous day or it has no date, use tomorrow's date\n      newDate = new Date();\n      newDate.setDate(newDate.getDate() + 1);\n    }\n\n    // Format the new date as YYYY-MM-DD\n    var formattedDate = newDate.toISOString().split('T')[0];\n    var newDay = {\n      date: formattedDate,\n      city: \"\",\n      hotel: \"\",\n      services: [],\n      guideServices: [],\n      cityServices: {\n        hotels: [],\n        service_types: []\n      }\n    };\n    this.days.splice(index + 1, 0, newDay);\n    this.updateAllDates();\n  }), \"insertHotelCostBelow\", function insertHotelCostBelow(index) {\n    var _this5 = this;\n    // Create a completely fresh hotel object with null prices\n    var newHotel = {\n      date: \"\",\n      name: \"\",\n      type: \"\",\n      room: \"1\",\n      nights: \"1\",\n      price: null,\n      extraBedPrice: null,\n      _display: {\n        // Add display properties to ensure price fields stay empty\n        price: \"\",\n        extraBedPrice: \"\"\n      }\n    };\n\n    // Create new array with the inserted hotel\n    this.hotelCosts = [].concat(_toConsumableArray(this.hotelCosts.slice(0, index + 1)), [JSON.parse(JSON.stringify(newHotel))], _toConsumableArray(this.hotelCosts.slice(index + 1)));\n\n    // Reset the values in the next tick to ensure they stay empty\n    this.$nextTick(function () {\n      var insertedIndex = index + 1;\n      if (_this5.hotelCosts[insertedIndex]) {\n        _this5.hotelCosts[insertedIndex] = _objectSpread(_objectSpread({}, _this5.hotelCosts[insertedIndex]), {}, {\n          price: null,\n          extraBedPrice: null,\n          _display: {\n            price: \"\",\n            extraBedPrice: \"\"\n          }\n        });\n      }\n    });\n  }), \"updateCityServices\", function updateCityServices(day) {\n    var _this6 = this;\n    return new Promise(function (resolve, reject) {\n      if (day.city && _this6.tourPackType) {\n        fetch(\"/get-city-services/\".concat(day.city, \"/?tour_pack_type=\").concat(encodeURIComponent(_this6.tourPackType))).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          day.cityServices = {\n            hotels: data.hotels || [],\n            service_types: data.service_types || []\n          };\n          // Update hotel costs when city services are updated\n          _this6.updateHotelCosts(day);\n          resolve();\n        })[\"catch\"](function (error) {\n          console.error(\"Error fetching city services:\", error);\n          day.cityServices = {\n            hotels: [],\n            service_types: []\n          };\n          reject(error);\n        });\n      } else {\n        day.cityServices = {\n          hotels: [],\n          service_types: []\n        };\n        resolve();\n      }\n    });\n  }), \"updateHotelCosts\", function updateHotelCosts(day) {\n    var selectedHotel = day.cityServices.hotels.find(function (h) {\n      return h.id.toString() === day.hotel;\n    });\n    if (selectedHotel) {\n      var existingCost = this.hotelCosts.find(function (cost) {\n        return cost.name === selectedHotel.name;\n      });\n      if (existingCost) {\n        existingCost.price = parseFloat(selectedHotel.price) || 0;\n      } else {\n        this.hotelCosts.push({\n          name: selectedHotel.name,\n          type: selectedHotel.type || '',\n          room: 1,\n          nights: 1,\n          price: parseFloat(selectedHotel.price) || 0,\n          extraBedPrice: 0\n        });\n      }\n    }\n  }), \"selectCorrectOptions\", function selectCorrectOptions(day) {\n    var _this7 = this;\n    console.log(\"Selecting correct options for day:\", day);\n\n    // Select the correct hotel\n    if (day.hotel) {\n      var selectedHotel = day.cityServices.hotels.find(function (h) {\n        return h.id.toString() === day.hotel;\n      });\n      if (selectedHotel) {\n        console.log(\"Selected hotel:\", selectedHotel);\n        day.hotel = selectedHotel.id.toString();\n      } else {\n        console.log(\"Hotel not found:\", day.hotel);\n      }\n    }\n\n    // Select the correct services\n    // Select the correct services\n    day.services.forEach(function (service) {\n      console.log(\"Processing service for selection:\", service);\n      var serviceType = day.cityServices.service_types.find(function (st) {\n        return st.type.toLowerCase() === service.type.toLowerCase();\n      });\n      if (serviceType) {\n        console.log(\"Found service type:\", serviceType);\n        var selectedService = serviceType.services.find(function (s) {\n          return s.id.toString() === service.name;\n        });\n        if (selectedService) {\n          console.log(\"Selected service:\", selectedService);\n          service.name = selectedService.id.toString();\n          service.price = parseFloat(selectedService.price) || 0;\n        } else {\n          console.log(\"Service not found:\", service.name);\n        }\n      } else {\n        console.log(\"Service type not found:\", service.type);\n      }\n    });\n\n    // Select the correct guide services\n    day.guideServices.forEach(function (guideService) {\n      console.log(\"Processing guide service for selection:\", guideService);\n      var selectedGuideService = _this7.guideServices.find(function (gs) {\n        return gs.id.toString() === guideService.name;\n      });\n      if (selectedGuideService) {\n        console.log(\"Selected guide service:\", selectedGuideService);\n        guideService.name = selectedGuideService.id.toString();\n        guideService.price = parseFloat(selectedGuideService.price) || 0;\n      } else {\n        console.log(\"Guide service not found:\", guideService.name);\n      }\n    });\n  }), \"getServiceNames\", function getServiceNames(day, serviceType) {\n    if (!day || !serviceType) {\n      console.log(\"No day or service type provided.\");\n      return [];\n    }\n    var serviceTypeObj = day.cityServices.service_types.find(function (st) {\n      return st.type.toLowerCase() === serviceType.toLowerCase();\n    });\n    if (serviceTypeObj && Array.isArray(serviceTypeObj.services)) {\n      console.log(\"Found services for type:\", serviceType, serviceTypeObj.services);\n      return serviceTypeObj.services;\n    }\n    console.log(\"No services found for type:\", serviceType);\n    return [];\n  }), \"updateService\", function updateService(day, service) {\n    var serviceNames = this.getServiceNames(day, service.type);\n    var selectedService = serviceNames.find(function (s) {\n      return s.id.toString() === service.name;\n    });\n    if (selectedService) {\n      service.price = parseFloat(selectedService.price) || 0;\n      service.price_at_booking = parseFloat(selectedService.price) || 0;\n    } else {\n      service.price = 0;\n      service.price_at_booking = 0;\n    }\n  }), \"updateGuideService\", function updateGuideService(guideService) {\n    var selectedGuideService = this.guideServices.find(function (gs) {\n      return gs.id.toString() === guideService.name;\n    });\n    if (selectedGuideService) {\n      guideService.price = parseFloat(selectedGuideService.price) || 0;\n      guideService.price_at_booking = parseFloat(selectedGuideService.price) || 0;\n    } else {\n      guideService.price = 0;\n      guideService.price_at_booking = 0;\n    }\n    // No need for explicit recalculation, Alpine.js will handle it\n  }), \"updateCityServices\", function updateCityServices(day) {\n    var _this8 = this;\n    return new Promise(function (resolve, reject) {\n      if (day.city && _this8.tourPackType) {\n        fetch(\"/get-city-services/\".concat(day.city, \"/?tour_pack_type=\").concat(encodeURIComponent(_this8.tourPackType))).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          day.cityServices = {\n            hotels: data.hotels || [],\n            service_types: data.service_types || []\n          };\n          resolve();\n        })[\"catch\"](function (error) {\n          console.error('Error fetching city services:', error);\n          day.cityServices = {\n            hotels: [],\n            service_types: []\n          };\n          reject(error);\n        });\n      } else {\n        day.cityServices = {\n          hotels: [],\n          service_types: []\n        };\n        resolve();\n      }\n    });\n  }), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref3, \"applyPredefinedQuote\", function applyPredefinedQuote() {\n    var _this9 = this;\n    if (!this.selectedPredefinedQuote) {\n      alert(\"Please select a predefined quote first.\");\n      return;\n    }\n    if (!this.tourPackType) {\n      alert(\"Please select a Tour Package Type before applying a predefined quote.\");\n      return;\n    }\n\n    // Check if there are existing days with missing dates\n    var hasInvalidDays = this.days.some(function (day) {\n      return !day.date;\n    });\n    if (hasInvalidDays) {\n      var confirmContinue = confirm(\"Some existing days don't have dates selected. Would you like to:\\n\\n\" + \"• Click 'OK' to remove incomplete days and apply the predefined quote\\n\" + \"• Click 'Cancel' to go back and fill in missing dates\");\n      if (confirmContinue) {\n        // Remove days with missing dates\n        this.days = this.days.filter(function (day) {\n          return day.date;\n        });\n      } else {\n        return;\n      }\n    }\n\n    // Add the tour pack type to the request\n    var url = \"/get-predefined-tour-quote/\".concat(this.selectedPredefinedQuote, \"/?tour_pack_type=\").concat(encodeURIComponent(this.tourPackType));\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(/*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {\n        var currentDate, lastDay, _iterator2, _step2, dayData, formattedDate, newDay, _iterator3, _step3, _loop2, _iterator4, _step4, _loop3;\n        return _regeneratorRuntime().wrap(function _callee3$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              // Find the date of the last existing day, or use today's date if no days exist\n\n              if (_this9.days.length > 0) {\n                lastDay = _this9.days[_this9.days.length - 1];\n                currentDate = new Date(lastDay.date);\n              } else {\n                currentDate = new Date();\n              }\n\n              // Process each day sequentially using async/await\n              _iterator2 = _createForOfIteratorHelper(data.days);\n              _context6.prev = 2;\n              _iterator2.s();\n            case 4:\n              if ((_step2 = _iterator2.n()).done) {\n                _context6.next = 49;\n                break;\n              }\n              dayData = _step2.value;\n              // Increment the date by 1 day\n              currentDate.setDate(currentDate.getDate() + 1);\n              formattedDate = currentDate.toISOString().split('T')[0];\n              newDay = {\n                date: formattedDate,\n                city: dayData.city.toString(),\n                hotel: dayData.hotel.toString(),\n                services: [],\n                guideServices: [],\n                cityServices: {\n                  hotels: [],\n                  service_types: []\n                }\n              }; // First update city services to ensure we have the correct data\n              _context6.next = 11;\n              return _this9.updateCityServices(newDay);\n            case 11:\n              if (!dayData.services) {\n                _context6.next = 29;\n                break;\n              }\n              dayData.services.sort(function (a, b) {\n                return a.order - b.order;\n              });\n              _iterator3 = _createForOfIteratorHelper(dayData.services);\n              _context6.prev = 14;\n              _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {\n                var service, serviceTypeData, availableService;\n                return _regeneratorRuntime().wrap(function _loop2$(_context4) {\n                  while (1) switch (_context4.prev = _context4.next) {\n                    case 0:\n                      service = _step3.value;\n                      // Find the service type from available city services\n                      serviceTypeData = newDay.cityServices.service_types.find(function (st) {\n                        return st.type.toLowerCase() === service.type.toLowerCase();\n                      });\n                      if (serviceTypeData) {\n                        // Find the specific service within the type\n                        availableService = serviceTypeData.services.find(function (s) {\n                          return s.id.toString() === service.id.toString();\n                        });\n                        if (availableService) {\n                          newDay.services.push({\n                            type: service.type.toLowerCase(),\n                            name: service.id.toString(),\n                            price: parseFloat(availableService.price) || 0,\n                            price_at_booking: parseFloat(availableService.price) || 0,\n                            quantity: service.quantity || 1,\n                            order: service.order\n                          });\n                        }\n                      }\n                    case 3:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }, _loop2);\n              });\n              _iterator3.s();\n            case 17:\n              if ((_step3 = _iterator3.n()).done) {\n                _context6.next = 21;\n                break;\n              }\n              return _context6.delegateYield(_loop2(), \"t0\", 19);\n            case 19:\n              _context6.next = 17;\n              break;\n            case 21:\n              _context6.next = 26;\n              break;\n            case 23:\n              _context6.prev = 23;\n              _context6.t1 = _context6[\"catch\"](14);\n              _iterator3.e(_context6.t1);\n            case 26:\n              _context6.prev = 26;\n              _iterator3.f();\n              return _context6.finish(26);\n            case 29:\n              if (!dayData.guideServices) {\n                _context6.next = 46;\n                break;\n              }\n              _iterator4 = _createForOfIteratorHelper(dayData.guideServices);\n              _context6.prev = 31;\n              _loop3 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop3() {\n                var gs, guideService;\n                return _regeneratorRuntime().wrap(function _loop3$(_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      gs = _step4.value;\n                      guideService = _this9.guideServices.find(function (g) {\n                        return g.id.toString() === gs.id.toString();\n                      });\n                      if (guideService) {\n                        newDay.guideServices.push({\n                          name: gs.id.toString(),\n                          price: parseFloat(guideService.price) || 0,\n                          price_at_booking: parseFloat(guideService.price) || 0\n                        });\n                      }\n                    case 3:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }, _loop3);\n              });\n              _iterator4.s();\n            case 34:\n              if ((_step4 = _iterator4.n()).done) {\n                _context6.next = 38;\n                break;\n              }\n              return _context6.delegateYield(_loop3(), \"t2\", 36);\n            case 36:\n              _context6.next = 34;\n              break;\n            case 38:\n              _context6.next = 43;\n              break;\n            case 40:\n              _context6.prev = 40;\n              _context6.t3 = _context6[\"catch\"](31);\n              _iterator4.e(_context6.t3);\n            case 43:\n              _context6.prev = 43;\n              _iterator4.f();\n              return _context6.finish(43);\n            case 46:\n              _this9.days.push(newDay);\n            case 47:\n              _context6.next = 4;\n              break;\n            case 49:\n              _context6.next = 54;\n              break;\n            case 51:\n              _context6.prev = 51;\n              _context6.t4 = _context6[\"catch\"](2);\n              _iterator2.e(_context6.t4);\n            case 54:\n              _context6.prev = 54;\n              _iterator2.f();\n              return _context6.finish(54);\n            case 57:\n              _context6.next = 59;\n              return Promise.all(_this9.days.map(function (day) {\n                return _this9.selectCorrectOptions(day);\n              }));\n            case 59:\n              // Recalculate totals\n              _this9.calculateGrandTotal();\n            case 60:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee3, null, [[2, 51, 54, 57], [14, 23, 26, 29], [31, 40, 43, 46]]);\n      }));\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }())[\"catch\"](function (error) {\n      console.error(\"Error applying predefined quote:\", error);\n      alert(\"Error applying predefined quote. Please try again.\");\n    });\n  }), \"updateAndSelectServices\", function updateAndSelectServices(day) {\n    var _this10 = this;\n    if (day.city && this.tourPackType) {\n      fetch(\"/get-city-services/\".concat(day.city, \"/?tour_pack_type=\").concat(this.tourPackType)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        day.cityServices = {\n          hotels: data.hotels || [],\n          service_types: data.service_types || []\n        };\n\n        // Select the correct hotel\n        if (day.hotel) {\n          var selectedHotel = day.cityServices.hotels.find(function (h) {\n            return h.id === day.hotel;\n          });\n          if (selectedHotel) {\n            day.hotel = selectedHotel.id;\n          }\n        }\n\n        // Select the correct services\n        day.services.forEach(function (service) {\n          var serviceType = day.cityServices.service_types.find(function (st) {\n            return st.type.toLowerCase() === service.type.toLowerCase();\n          });\n          if (serviceType) {\n            var selectedService = serviceType.services.find(function (s) {\n              return s.id === service.name;\n            });\n            if (selectedService) {\n              service.name = selectedService.id;\n              service.price = parseFloat(selectedService.price) || 0;\n            }\n          }\n        });\n\n        // Select the correct guide services\n        day.guideServices.forEach(function (guideService) {\n          var selectedGuideService = _this10.guideServices.find(function (gs) {\n            return gs.id === guideService.name;\n          });\n          if (selectedGuideService) {\n            guideService.name = selectedGuideService.id;\n            guideService.price = parseFloat(selectedGuideService.price) || 0;\n          }\n        });\n      })[\"catch\"](function (error) {\n        console.error(\"Error fetching city services:\", error);\n        day.cityServices = {\n          hotels: [],\n          service_types: []\n        };\n      });\n    } else {\n      day.cityServices = {\n        hotels: [],\n        service_types: []\n      };\n    }\n  }), \"dragStart\", function dragStart(event, index) {\n    event.target.classList.add(\"dragging\");\n    event.dataTransfer.effectAllowed = \"move\";\n    event.dataTransfer.setData(\"text/plain\", index);\n    this.isDragging = true;\n  }), \"dragEnd\", function dragEnd(event) {\n    event.target.classList.remove(\"dragging\"); // Remove dragging class\n    console.log(\"Dragging ended, class removed:\", event.target); // Debugging\n  }), \"dragEnter\", function dragEnter(event) {\n    if (!event.target.classList.contains(\"border-dashed\")) {\n      event.target.classList.add(\"border-dashed\", \"border-blue-500\");\n    }\n  }), \"dragOver\", function dragOver(event) {\n    // Scroll when near the top or bottom of the viewport\n    var scrollMargin = 300; // Pixels from the edge to trigger scroll\n    var scrollSpeed = 20; // Speed of scrolling\n\n    if (event.clientY < scrollMargin) {\n      // Near the top\n      window.scrollBy(0, -scrollSpeed);\n    } else if (window.innerHeight - event.clientY < scrollMargin) {\n      // Near the bottom\n      window.scrollBy(0, scrollSpeed);\n    }\n    event.preventDefault(); // Prevent default to allow drop\n  }), \"dragLeave\", function dragLeave(event) {\n    if (!event.relatedTarget || !event.currentTarget.contains(event.relatedTarget)) {\n      event.target.classList.remove(\"border-dashed\", \"border-blue-500\");\n    }\n  }), \"drop\", function drop(event, toIndex) {\n    event.preventDefault();\n    var fromIndex = parseInt(event.dataTransfer.getData(\"text/plain\"));\n    if (fromIndex !== toIndex) {\n      var movedDay = this.days.splice(fromIndex, 1)[0];\n      this.days.splice(toIndex, 0, movedDay);\n    }\n    this.isDragging = false;\n    event.target.classList.remove(\"border-dashed\", \"border-blue-500\");\n  }), \"validateForm\", function validateForm() {\n    var _this11 = this;\n    this.errors = {};\n    if (!this.name.trim()) {\n      this.errors.name = \"Package name is required.\";\n    }\n    if (!this.customerName.trim()) {\n      this.errors.customerName = \"Customer name is required.\";\n    }\n    if (!this.tourPackType) this.errors.tourPackType = \"Tour package type is required.\";\n    if (this.days.length === 0) {\n      this.errors.days = \"At least one day is required.\";\n    }\n    this.days.forEach(function (day, index) {\n      if (!day.date) {\n        _this11.errors[\"day\".concat(index + 1, \"_date\")] = \"Date is required for Day \".concat(index + 1, \".\");\n      }\n      if (!day.city) {\n        _this11.errors[\"day\".concat(index + 1, \"_city\")] = \"City is required for Day \".concat(index + 1, \".\");\n      }\n      if (!day.hotel) {\n        _this11.errors[\"day\".concat(index + 1, \"_hotel\")] = \"Hotel is required for Day \".concat(index + 1, \".\");\n      }\n    });\n    return Object.keys(this.errors).length === 0;\n  }), \"saveTourPackage\", function saveTourPackage() {\n    if (!this.validateForm()) {\n      console.log(\"Form validation failed\", this.errors);\n      alert(\"Please correct the errors before submitting.\");\n      return;\n    }\n\n    // Helper function to ensure numeric values are properly formatted\n    var formatNumber = function formatNumber(value) {\n      if (typeof value === 'number') {\n        return value.toFixed(2);\n      }\n      return value ? parseFloat(value).toFixed(2) : '0.00';\n    };\n    data = {\n      // Include the package ID for existing packages\n      package_reference: this.packageReference,\n      hotelCosts: this.hotelCosts.map(function (cost) {\n        return _objectSpread(_objectSpread({}, cost), {}, {\n          date: cost.date || '',\n          room: parseInt(cost.room) || 0,\n          nights: parseInt(cost.nights) || 0,\n          price: formatNumber(cost.price),\n          extraBedPrice: formatNumber(cost.extraBedPrice)\n        });\n      }),\n      name: this.name,\n      customer_name: this.customerName,\n      remark: this.remark,\n      remark2: this.remark2,\n      remark_of_hotels: this.remark_of_hotels,\n      tour_pack_type: this.tourPackType,\n      commission_rate_hotel: this.commission_rate_hotel,\n      commission_rate_services: this.commission_rate_services,\n      days: this.days.map(function (day) {\n        return {\n          date: day.date,\n          city: day.city,\n          hotel: day.hotel,\n          services: day.services.map(function (service) {\n            return {\n              name: service.name,\n              price_at_booking: service.price\n            };\n          }),\n          guide_services: day.guideServices.map(function (gs) {\n            return {\n              name: gs.name,\n              price_at_booking: gs.price\n            };\n          })\n        };\n      }),\n      // hotelCosts: this.hotelCosts,\n\n      discounts: this.discounts.map(function (discount) {\n        return _objectSpread(_objectSpread({}, discount), {}, {\n          amount: formatNumber(discount.amount)\n        });\n      }),\n      extraCosts: this.extraCosts.map(function (cost) {\n        return _objectSpread(_objectSpread({}, cost), {}, {\n          amount: formatNumber(cost.amount)\n        });\n      }),\n      total_cost: this.calculateGrandTotal()\n    };\n    var url = this.packageReference ? \"/save-tour-package/\".concat(this.packageReference, \"/\") : \"/save-tour-package/\";\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCookie(\"csrftoken\")\n      },\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      if (data.status === \"success\") {\n        alert(\"Tour package saved successfully!\");\n        window.location.href = \"/\".concat(data.package_reference, \"/\");\n      } else {\n        alert(\"Error saving tour package: \" + data.message);\n      }\n    })[\"catch\"](function (error) {\n      console.error(\"Error:\", error);\n      alert(\"An error occurred while saving the tour package.\");\n    });\n  }), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref3, \"addHotelCost\", function addHotelCost() {\n    this.hotelCosts.push({\n      name: \"\",\n      type: \"\",\n      room: 1,\n      nights: 1,\n      price: 0,\n      extraBedPrice: \"\"\n    });\n  }), \"removeHotelCost\", function removeHotelCost(index) {\n    // Simply remove the item at the specified index\n    this.hotelCosts.splice(index, 1);\n  }), \"addDiscount\", function addDiscount() {\n    this.discounts.push({\n      item: \"\",\n      amount: 0\n    });\n  }), \"removeDiscount\", function removeDiscount(index) {\n    this.discounts.splice(index, 1);\n  }), \"addExtraCost\", function addExtraCost() {\n    this.extraCosts.push({\n      item: \"\",\n      amount: 0\n    });\n  }), \"removeExtraCost\", function removeExtraCost(index) {\n    this.extraCosts.splice(index, 1);\n  }), \"calculateHotelCostTotal\", function calculateHotelCostTotal() {\n    return this.hotelCosts.reduce(function (total, cost) {\n      var roomCost = (parseFloat(cost.room) || 0) * (parseFloat(cost.nights) || 0) * (parseFloat(cost.price) || 0);\n      var extraBedCost = (parseFloat(cost.nights) || 0) * (parseFloat(cost.extraBedPrice) || 0);\n      return total + roomCost + extraBedCost;\n    }, 0).toFixed(2);\n  }), \"calculateTotalDiscounts\", function calculateTotalDiscounts() {\n    return this.discounts.reduce(function (total, discount) {\n      return total + (parseFloat(discount.amount) || 0);\n    }, 0).toFixed(2);\n  }), \"calculateTotalExtraCosts\", function calculateTotalExtraCosts() {\n    return this.extraCosts.reduce(function (total, cost) {\n      return total + (parseFloat(cost.amount) || 0);\n    }, 0).toFixed(2);\n  }), \"calculateGrandTotal\", function calculateGrandTotal() {\n    var serviceTotal = 0;\n    var guideServiceTotal = 0;\n    var hotelTotal = 0;\n    this.days.forEach(function (day, index) {\n      day.services.forEach(function (service) {\n        var price = parseFloat(service.price) || 0;\n        var quantity = parseInt(service.quantity) || 1;\n        serviceTotal += price * quantity;\n        console.log(\"Day \".concat(index + 1, \" service: \").concat(service.name, \", Price: \").concat(price, \", Quantity: \").concat(quantity, \", Total: \").concat(price * quantity));\n      });\n      day.guideServices.forEach(function (guideService) {\n        var price = parseFloat(guideService.price) || 0;\n        guideServiceTotal += price;\n        console.log(\"Day \".concat(index + 1, \" guide service: \").concat(guideService.name, \", Price: \").concat(price));\n      });\n    });\n    hotelTotal = this.hotelCosts.reduce(function (total, cost) {\n      var roomCost = (parseFloat(cost.room) || 0) * (parseFloat(cost.nights) || 0) * (parseFloat(cost.price) || 0);\n      var extraBedCost = (parseFloat(cost.nights) || 0) * (parseFloat(cost.extraBedPrice) || 0);\n      console.log(\"Hotel: \".concat(cost.name, \", Room Cost: \").concat(roomCost, \", Extra Bed Cost: \").concat(extraBedCost));\n      return total + roomCost + extraBedCost;\n    }, 0);\n    var serviceGrandTotal = serviceTotal + guideServiceTotal;\n    var hotelGrandTotal = hotelTotal;\n    var extraCostsTotal = parseFloat(this.calculateTotalExtraCosts());\n    var grandTotal = serviceGrandTotal + hotelGrandTotal;\n    var totalRoomNights = this.hotelCosts.reduce(function (total, cost) {\n      return total + (parseFloat(cost.room) || 0) * (parseFloat(cost.nights) || 0);\n    }, 0);\n    var commission_amount_hotel = (parseFloat(this.commission_rate_hotel) * totalRoomNights).toFixed(2);\n    var commission_amount_services = (parseFloat(this.commission_rate_services) * serviceGrandTotal / 100).toFixed(2);\n    var totalDiscounts = this.discounts.reduce(function (total, discount) {\n      return total + (parseFloat(discount.amount) || 0);\n    }, 0);\n    var finalGrandTotal = grandTotal - totalDiscounts;\n    return {\n      serviceGrandTotal: serviceGrandTotal.toFixed(2),\n      hotelGrandTotal: hotelGrandTotal.toFixed(2),\n      extraCostsTotal: extraCostsTotal.toFixed(2),\n      grandTotal: grandTotal.toFixed(2),\n      finalGrandTotal: finalGrandTotal.toFixed(2),\n      commission_amount_hotel: commission_amount_hotel,\n      commission_amount_services: commission_amount_services,\n      totalDiscounts: totalDiscounts.toFixed(2)\n    };\n  }), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref3, \"copyDay\", function copyDay(index) {\n    var _this12 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var originalDay, newDay, nextDate, tomorrow;\n      return _regeneratorRuntime().wrap(function _callee4$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            if (!(index < 0 || index >= _this12.days.length)) {\n              _context7.next = 2;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 2:\n            // Invalid index\n            originalDay = _this12.days[index]; // Create a new day object with only the essential information\n            newDay = {\n              date: '',\n              city: originalDay.city,\n              hotel: '',\n              // We'll set this after updating city services\n              services: [],\n              // Empty array for services\n              guideServices: [],\n              // Empty array for guide services\n              cityServices: {\n                hotels: [],\n                service_types: []\n              }\n            }; // Increment the date\n            if (originalDay.date) {\n              nextDate = new Date(originalDay.date);\n              nextDate.setDate(nextDate.getDate() + 1);\n              newDay.date = nextDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n            } else {\n              // If no valid date, use tomorrow's date\n              tomorrow = new Date();\n              tomorrow.setDate(tomorrow.getDate() + 1);\n              newDay.date = tomorrow.toISOString().split('T')[0];\n            }\n\n            // Update city services for the new day\n            if (!newDay.city) {\n              _context7.next = 18;\n              break;\n            }\n            _context7.prev = 6;\n            _context7.next = 9;\n            return _this12.updateCityServices(newDay);\n          case 9:\n            console.log('City services updated:', newDay.cityServices);\n            // Select the hotel after city services are updated\n            _context7.next = 12;\n            return _this12.selectHotelForCopiedDay(newDay, originalDay.hotel);\n          case 12:\n            console.log('Hotel selected:', newDay.hotel);\n            _context7.next = 18;\n            break;\n          case 15:\n            _context7.prev = 15;\n            _context7.t0 = _context7[\"catch\"](6);\n            console.error('Error updating city services or selecting hotel:', _context7.t0);\n          case 18:\n            // Insert the new day after the original day\n            _this12.days.splice(index + 1, 0, newDay);\n\n            // Trigger Alpine.js to re-evaluate the template\n            _this12.days = _toConsumableArray(_this12.days);\n\n            // Update all dates after copying the day\n            _this12.updateAllDates();\n          case 21:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee4, null, [[6, 15]]);\n    }))();\n  }), \"updateCityServices\", function updateCityServices(day) {\n    var _this13 = this;\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var response, _data;\n      return _regeneratorRuntime().wrap(function _callee5$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(day.city && _this13.tourPackType)) {\n              _context8.next = 20;\n              break;\n            }\n            _context8.prev = 1;\n            _context8.next = 4;\n            return fetch(\"/get-city-services/\".concat(day.city, \"/?tour_pack_type=\").concat(encodeURIComponent(_this13.tourPackType)));\n          case 4:\n            response = _context8.sent;\n            if (response.ok) {\n              _context8.next = 7;\n              break;\n            }\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n          case 7:\n            _context8.next = 9;\n            return response.json();\n          case 9:\n            _data = _context8.sent;\n            day.cityServices = {\n              hotels: _data.hotels || [],\n              service_types: _data.service_types || []\n            };\n            console.log('Updated city services:', day.cityServices);\n            _context8.next = 18;\n            break;\n          case 14:\n            _context8.prev = 14;\n            _context8.t0 = _context8[\"catch\"](1);\n            console.error(\"Error fetching city services:\", _context8.t0);\n            day.cityServices = {\n              hotels: [],\n              service_types: []\n            };\n          case 18:\n            _context8.next = 22;\n            break;\n          case 20:\n            console.log('No city or tour pack type set, skipping city services update');\n            day.cityServices = {\n              hotels: [],\n              service_types: []\n            };\n          case 22:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee5, null, [[1, 14]]);\n    }))();\n  }), \"selectHotelForCopiedDay\", function selectHotelForCopiedDay(newDay, originalHotel) {\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n      var selectedHotel;\n      return _regeneratorRuntime().wrap(function _callee6$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            if (originalHotel && newDay.cityServices && newDay.cityServices.hotels) {\n              selectedHotel = newDay.cityServices.hotels.find(function (h) {\n                return h.id.toString() === originalHotel.toString();\n              });\n              if (selectedHotel) {\n                newDay.hotel = selectedHotel.id.toString();\n                console.log('Selected hotel for copied day:', newDay.hotel);\n              } else {\n                newDay.hotel = '';\n                console.log('Original hotel not found in new day\\'s options. Hotel selection reset.');\n              }\n            } else {\n              newDay.hotel = '';\n              console.log('No hotel to copy or no hotel options available. Hotel selection reset.');\n            }\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee6);\n    }))();\n  }), \"formatCommaNumber\", function formatCommaNumber(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }), \"unformatCommaNumber\", function unformatCommaNumber(num) {\n    return num.replace(/,/g, '');\n  }), \"handleFirstDayDateChange\", function handleFirstDayDateChange() {\n    this.updateAllDates();\n  }), \"updateAllDates\", function updateAllDates() {\n    if (this.days.length === 0) return;\n    var firstDay = this.days[0];\n    if (!firstDay.date) return;\n\n    // Start from the first date and update all subsequent dates\n    var startDate = new Date(firstDay.date);\n\n    // Update all days after the first one\n    for (var i = 1; i < this.days.length; i++) {\n      var nextDate = new Date(startDate);\n      nextDate.setDate(startDate.getDate() + i);\n      this.days[i].date = nextDate.toISOString().split('T')[0];\n    }\n  });\n};\n\n//# sourceURL=webpack://your-project-name/./static/tour_quote/js/tour_package.js?");

/***/ }),

/***/ "./static/css/styles.css":
/*!*******************************!*\
  !*** ./static/css/styles.css ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://your-project-name/./static/css/styles.css?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./static/js/index.js");
/******/ 	
/******/ })()
;